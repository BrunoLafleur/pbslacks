#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

. "$(dirname $0)/pbinclude"

# For systemnet upgrade. Change mirror if you want.
SLACKMIR='http://nephtys.lip6.fr/pub/linux/distributions/slackware/slackware64-current/'

xhelp () {
    mygt 'Launch this script in the directory including alreadey cloned slackware64 or slackware64-current.\nIt can be on the bootable slackware install USB stick.\npbslacks should also be there.'|sed 's@\\n@\n@g'
    echo
    echo '  > cd .../Slackware-x64-date'
    echo 'or> cd /run/media/$USER/USBSLACKINS/SlackDVD'
    echo '  > pbslacks/pbupgrade [-new (no system update)]'
    echo '       [-test (test only, no actions)] [-help|-h] [-nodial]'
    echo '       [-post (actions to do preferably after a postinstall reboot)]'
}

XNEW=
XPOST=
MYUSER=produits
MYGROUP=users

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-new" ] ;then
	XNEW=yes
    elif [ "$MYARG" = "-nodial" ] ;then
	ISDIAL=0
    elif [ "$MYARG" = "-test" ] ;then
	XTEST=1
    elif [ "$MYARG" = "-post" ] ;then
	XPOST=yes
    elif [ "$MYARG" = "-u" ] ;then
	shift
	MYUSER="$1"
    elif [ "$MYARG" = "-g" ] ;then
	shift
	MYGROUP="$1"
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
	xhelp
	exit 0
    fi
    shift
done

XTEMPOUT=$(mktemp -p /tmp -t pbupgradeout.XXXXXX)
XTEMPMES=$(mktemp -p /tmp -t pbupgrademes.XXXXXX)

# Upgrade with the main stream package.
xupmainpac () {
    pac="$1"
    suf="$2"
    repo="$3"
    grp="$4"
    [ $(ls /var/log/packages/${pac}*-[0-9]$repo 2> /dev/null|wc -l) -eq 1 ] &&\
	upgradepkg slackware64/$grp/${pac}*$suf
}

# Upgradepkg with reinstall if the package date is newer than the installed
# one. I could have recompiled.
upgradedir () {
    xdir="$1"
    (
	cd "$xdir"
	ls *.t?z|while read i;test "$i" != "" ;do
	    upgradepkg --install-new "$i"
	    j=/var/log/packages/$(echo "$i"|sed 's/\.t.z$//')
	    [ "$i" -nt "$j" ] && upgradepkg --reinstall "$i"
	done
    )
}

# Some config I always use.
myconfig () {
    if [ -d /etc/profile.d ] ; then
	cp pbslacks/LocaleFR/csh.cshrc /etc
	cp pbslacks/LocaleFR/pbalias.sh /etc/profile.d
	XLANG=$(echo $LANG|cut -d '.' -f1|cut -d '_' -f1)
	if [ "$XLANG" = 'fr' ] ;then
	    cp pbslacks/LocaleFR/lang.* /etc/profile.d
	    KBX11=90-keyboard-layout-evdev.conf
	    [ ! -f /etc/X11/xorg.conf.d/$KBX11 ] && \
		cp pbslacks/LocaleFR/$KBX11 /etc/X11/xorg.conf.d
	fi
    fi
}

cleanup () {
    rm -f $XTEMPOUT
    rm -f $XTEMPMES
}

trap 'echo "*** Ctrl-C caught -- aborting operations ***"; cleanup; exit 1' 2 14 15 # trap Ctrl-C and kill

if [ ! -d /boot ] ;then
    mygt "Do the install of the Slackware Linux distribution before :\n-see the doc/SLACKWARE.txt file." |sed 's@\\n@\n@g' > $XTEMPMES
fi

if [ $XTEST -ne 1 ] ;then
    if [ -d slackware64-current ] ;then
	cd slackware64-current
    fi
    if [ ! -d slackware64 -o '(' ! -h pbslacks -a ! -d pbslacks ')' ] ;then
	mygt 'slackware64 or pbslacks not found.'> $XTEMPMES
	xhelp >> $XTEMPMES
    fi
fi

if [ -s "$XTEMPMES" ] ;then
    dialog --colors --backtitle 'pbupgrade' --title 'End messages' \
	--msgbox "$(cat $XTEMPMES)" 20 85
    cleanup
    exit 1
fi

DACTION=$(mygt 'Actions which were done')

if [ $XTEST -ne 1 ] ;then
    if [ ! $UID = 0 ]; then
        mygt 'This script must be done as root. Exit.' > $XTEMPMES
        dialog --colors --backtitle 'pbupgrade' --title "$DACTION" \
	    --msgbox "$(cat $XTEMPMES)" 20 80
	cleanup
	exit 1
    fi
fi

MYPWD=$(pwd)
HOMESLACK="$MYPWD"

if [ "$XNEW" = 'yes' ] ;then
    XUPSYSTEM=off
else
    XUPSYSTEM=on
fi

if [ "$XPOST" = 'yes' ] ;then
    XUPNOPOST=off
    XUPPOST=on
    XUPSYSTEM=off
else
    XUPPOST=off
    XUPNOPOST=on
fi

xmaster () {
    defitem=$1;shift
    xsel1=$1;shift;xsel2=$1;shift;xsel3=$1;shift;xsel4=$1;shift;xsel5=$1;shift
    xsel6=$1;shift;xsel7=$1;shift;xsel8=$1;shift;xsel9=$1;shift;xsel10=$1;shift
    xsel11=$1;shift;xsel12=$1;shift;xsel13=$1;shift;xsel14=$1;shift
    xsel15=$1;shift;xsel16=$1;shift;xsel17=$1;shift;xsel18=$1;shift
    xsel19=$1;shift;xsel20=$1;shift;xsel21=$1;shift;xsel22=$1;shift
    xsel23=$1;shift;xsel24=$1
    pactit=$(mygt 'Main menu')
    pactit="pbupgrade: $pactit"
    dialog --colors --backtitle 'pbupgrade' --title "$pactit" \
	--default-item $defitem --defaultno \
	--separate-output --item-help --help-button --help-status --checklist \
	"$(mygt 'Choose your actions below after you have launch the \Zbpbaspire*\ZB script')" 0 100 24 \
	system "$(mygt 'Sync/Update system to the last fetched current Slackware')" $xsel1 system \
	systemnet "$(mygt 'Sync/Update system to the last current Slackware on the internet')" $xsel2 systemnet \
	compat32 "$(mygt 'Install/Update the 32 bits compatible mode')" $xsel3 compat32 \
	mozilla "$(mygt 'Install/Update the Firefox and Thunderbird softwares')" $xsel4 mozilla \
	packages "$(mygt 'Install/Update the packages set of software')" $xsel5 packages \
	packages2 "$(mygt 'Install/Update the packages2 set of software')" $xsel6 packages2 \
	packages3 "$(mygt 'Install/Update the packages3 set of software')" $xsel7 packages3 \
	packages4 "$(mygt 'Install/Update the packages4 set of software')" $xsel8 packages4 \
	frameworks "$(mygt 'Install/Update the KDE5 frameworks libraries')" $xsel9 frameworks \
	openshot "$(mygt 'Install/Update the Openshot software')" $xsel10 openshot \
	audacity "$(mygt 'Install/Update the Audacity software')" $xsel11 audacity \
	ardour "$(mygt 'Install/Update the Ardour software')" $xsel12 ardour \
	tesseract4 "$(mygt 'Install/Update the Tesseract version 4 software')" $xsel13 tesseract4 \
	bumblebee "$(mygt 'Install/Update the Bumblebee support of your second NVIDIA graphic card')" $xsel14 bumblebee \
	recreatepackages "$(mygt 'Compile again the packages set of software')" $xsel15 recreatepackages \
	recreatepackages2 "$(mygt 'Compile again the packages2 set of software')" $xsel16 recreatepackages2 \
	recreatepackages3 "$(mygt 'Compile again the packages3 set of software')" $xsel17 recreatepackages3 \
	recreatepackages4 "$(mygt 'Compile again the packages4 set of software')" $xsel18 recreatepackages4 \
	recreatechromium "$(mygt 'Compile again the Chromium software')" $xsel19 recreatechromium \
	recreateopenshot "$(mygt 'Compile again the Openshot software')" $xsel20 recreateopenshot \
	recreateaudacity "$(mygt 'Compile again the Audacity software')" $xsel21 recreateaudacity \
	recreateardour "$(mygt 'Compile again the Ardour software')" $xsel22 recreateardour \
	recreatebumblebee "$(mygt 'Compile again Bumblebee packages.')" $xsel23 recreatebumblebee \
    	bootload "$(mygt 'Upgrade boot loader.')" $xsel24 bootload
}

xpacaide () {
    packages="$1"
    pacaide="Update the $packages set of tools :"
    ls -1 "$packages/"*.t?z > $XTEMPMES
    while read j;test "$j" != "" ;do
	pacaide="${pacaide}\n$j"
    done < $XTEMPMES
    rm -f $XTEMPMES
}

xsel="$XUPSYSTEM off $XUPNOPOST $XUPNOPOST $XUPNOPOST $XUPNOPOST $XUPNOPOST $XUPNOPOST \
$XUPNOPOST $XUPNOPOST $XUPNOPOST $XUPNOPOST $XUPNOPOST $XUPPOST $XUPPOST \
$XUPPOST $XUPPOST $XUPPOST $XUPPOST $XUPPOST $XUPPOST $XUPPOST $XUPPOST off"
ditem=system
bclaide=1

while [ $bclaide -eq 1 ] ;do
    xmaster $ditem $xsel 2> $XTEMPOUT
    bclaide=$(cat $XTEMPOUT|grep '^HELP'|wc -l)
    if [ $bclaide -eq 1 ] ;then
	xitem="$(cat $XTEMPOUT|grep '^HELP'|cut -d ' ' -f2)"
	xsel=
	for i in system systemnet compat32 mozilla packages packages2 packages3 \
			packages4 frameworks openshot audacity ardour tesseract4 \
			bumblebee recreatepackages recreatepackages2 recreatepackages3 \
			recreatepackages4 recreatechromium recreateopenshot \
			recreateaudacity recreateardour recreatebumblebee bootload ;do
	  if [ $(grep "^$i$" "$XTEMPOUT"|wc -l) -eq 1 ] ;then
	      xsel="$xsel on"
	  else
	      xsel="$xsel off"
	  fi
	done
	ditem=$xitem;bclaide=1;pacaide=
	if [ "$xitem" = system ] ;then
	    pacaide=$(mygt 'Upgrade your Slackware system with the last current fetched.\nUses Slackpkg.')
	elif [ "$xitem" = systemnet ] ;then
	    pacaide=$(mygt 'Upgrade your Slackware system with the last current on the internet.\nUses Slackpkg.')
	elif [ "$xitem" = compat32 ] ;then
	    pacaide=$(mygt 'Upgrade the Alien Bob 32 bits compatible mode.')
	elif [ "$xitem" = mozilla ] ;then
	    pacaide=$(mygt 'Upgrade the Firefox and Thunderbird products.\nThey should be downloaded and put in the packages/Mozilla directory before.')
	elif [ "$(echo "$xitem"|cut -c1-8)" = packages ] ;then
	    xpacaide "$xitem"
	elif [ "$xitem" = frameworks ] ;then
	    xpacaide packages4/frameworks
	elif [ "$xitem" = openshot ] ;then
	    xpacaide packages/openshot
	elif [ "$xitem" = audacity ] ;then
	    xpacaide packages4/audacity
	elif [ "$xitem" = ardour ] ;then
	    xpacaide packages4/ardour
	elif [ "$xitem" = tesseract4 ] ;then
	    xpacaide packages4/tesseract4
	elif [ "$xitem" = bumblebee ] ;then
	    pacaide=$(mygt 'Upgrade your Bumblebee packages if they are in sync with the upgraded Slackware.\nDone on another machine for exemple.')
	elif [ "$(echo "$xitem"|cut -c1-16)" = recreatepackages ] ;then
	    pacaide=$(mygt 'Redo the packages which are here in sources form.\nIf not already done on this machine or another.')
	elif [ "$xitem" = recreatechromium ] ;then
	    pacaide=$(mygt 'Redo the Chromium navigator which are here in sources form.\nIf not already done on this machine or another.\nIt is a very long process (some hours).\nIt is usefull for Opera having the libffmeg.so library with the h264 support.')
	elif [ "$xitem" = recreateopenshot ] ;then
	    pacaide=$(mygt 'Redo the openshot packages which are here in sources form.\nIf not already done on this machine or another.')
	elif [ "$xitem" = recreateaudacity ] ;then
	    pacaide=$(mygt 'Redo the audacity packages which are here in sources form.\nIf not already done on this machine or another.')
	elif [ "$xitem" = recreateardour ] ;then
	    pacaide=$(mygt 'Redo the ardour packages which are here in sources form.\nIf not already done on this machine or another.')
	elif [ "$xitem" = recreatebumblebee ] ;then
	    pacaide=$(mygt 'Redo the Bumblebee packages.\nIf not already done on this machine or another.\nYou should reboot after upgrading system packages and before doing this action else the Bumblebee packages wont built.')
	elif [ "$xitem" = bootload ] ;then
	    pacaide=$(mygt "Upgrade your boot loader only if you update your system and not the bootloader.") 
	fi
	dialog --colors --backtitle 'pbupgrade' --title "$xitem" \
	    --msgbox "$pacaide" 20 90
    fi
done

XEND=0
OPTRECRE=
ISSYSTEM="$(cat $XTEMPOUT|grep '^system$'|wc -l)"
ISSYSNET="$(cat $XTEMPOUT|grep '^systemnet$'|wc -l)"
ISCOMPAT="$(cat $XTEMPOUT|grep '^compat32$'|wc -l)"
ISMOZ="$(cat $XTEMPOUT|grep '^mozilla$'|wc -l)"
ISPACK="$(cat $XTEMPOUT|grep '^packages$'|wc -l)"
ISPACK2="$(cat $XTEMPOUT|grep '^packages2$'|wc -l)"
ISPACK3="$(cat $XTEMPOUT|grep '^packages3$'|wc -l)"
ISPACK4="$(cat $XTEMPOUT|grep '^packages4$'|wc -l)"
ISFRAME="$(cat $XTEMPOUT|grep '^frameworks$'|wc -l)"
ISOPENSHOT="$(cat $XTEMPOUT|grep '^openshot$'|wc -l)"
ISAUDACITY="$(cat $XTEMPOUT|grep '^audacity$'|wc -l)"
ISARDOUR="$(cat $XTEMPOUT|grep '^ardour$'|wc -l)"
ISTESS="$(cat $XTEMPOUT|grep '^tesseract4$'|wc -l)"
ISBUMBLE="$(cat $XTEMPOUT|grep '^bumblebee$'|wc -l)"
ISRECRE="$(cat $XTEMPOUT|grep '^recreatepackages$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -ispac1'
ISRECRE="$(cat $XTEMPOUT|grep '^recreatepackages2$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -ispac2'
ISRECRE="$(cat $XTEMPOUT|grep '^recreatepackages3$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -ispac3'
ISRECRE="$(cat $XTEMPOUT|grep '^recreatepackages4$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -ispac4'
ISRECRE="$(cat $XTEMPOUT|grep '^recreatechromium$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -ischromium'
ISRECRE="$(cat $XTEMPOUT|grep '^recreateopenshot$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -isopenshot'
ISRECRE="$(cat $XTEMPOUT|grep '^recreateaudacity$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -isaudacity'
ISRECRE="$(cat $XTEMPOUT|grep '^recreateardour$'|wc -l)";[ $ISRECRE -eq 1 ] && OPTRECRE+=' -isardour'
ISRECREBUMBLE="$(cat $XTEMPOUT|grep '^recreatebumblebee$'|wc -l)"
ISBOOTLOAD="$(cat $XTEMPOUT|grep '^bootload$'|wc -l)"

if [ $ISSYSTEM -eq 1 -o $ISSYSNET -eq 1 ] ;then
    if [ $XTEST -ne 1 ] ;then
	cp pbslacks/Slackpkg/blacklist /etc/slackpkg
        if [ $ISSYSTEM -eq 1 ] ;then
	    cat pbslacks/Slackpkg/slackpkg.conf | sed "s@CHECKGPG=on@CHECKGPG=off@" \
		    > /etc/slackpkg/slackpkg.conf
	    cat pbslacks/Slackpkg/mirrors | sed "s@HOMESLACK@${HOMESLACK}@" \
		    > /etc/slackpkg/mirrors
	else
	    cp pbslacks/Slackpkg/slackpkg.conf /etc/slackpkg
	    cat pbslacks/Slackpkg/mirrors | \
		    sed "s@^.*HOMESLACK.*\$@${SLACKMIR}@" > /etc/slackpkg/mirrors
	fi
	slackpkg update gpg
	slackpkg update
	slackpkg install-new
	slackpkg upgrade-all
	slackpkg clean-system

	if [ $? -ne 0 ] ;then
	    rm -f $XTEMPOUT
	    which slackpkg 2> $XTEMPMES
	    mygt 'Abort : see previous errors.' >> $XTEMPMES
	    mygt "Upgrade system not done." >> $XTEMPMES
	    XEND=1
	else
            xupmainpac "libxkbcommon-" t?z alien l
            xupmainpac "qt5-[0-9]" t?z alien l
            xupmainpac "qt5-webkit-[0-9]" t?z alien l
            xupmainpac "PyQt5-[0-9]" t?z alien l
	    myconfig
	    mygt "Upgrade system done." >> $XTEMPMES
	fi

    else
	mygt "Upgrade system done." >> $XTEMPMES
    fi
fi
if [ $XEND -eq 0 ] ;then
    if [ $ISCOMPAT -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradepkg --reinstall --install-new current/*.t?z
	    upgradepkg --install-new current/slackware64-compat32/*/*.t?z
	fi
	mygt "Upgrade Alien Bob multilib done." >> $XTEMPMES
    fi
    if [ $ISMOZ -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    $HOMESLACK/pbslacks/pbupgrademoz
	fi
	mygt "Upgrade Mozilla done." >> $XTEMPMES
    fi
    if [ $ISPACK -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages
	    upgradedir packages/compat32
	fi
	mygt "Upgrade packages done." >> $XTEMPMES
    fi
    if [ $ISPACK2 -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages2
            cp packages2/youtube.lua /usr/lib64/vlc/lua/playlist
            rm -f /usr/lib64/vlc/lua/playlist/youtube.luac
	fi
	mygt "Upgrade packages2 done." >> $XTEMPMES
    fi
    if [ $ISPACK3 -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages3
	fi
	mygt "Upgrade packages3 done." >> $XTEMPMES
    fi
    if [ $ISPACK4 -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages4
	    if [ -f /usr/lib64/chromium/libffmpeg.so ] ;then
		mv -f /usr/lib64/opera/libffmpeg.so /usr/lib64/opera/libffmpeg.so.bak
		ln -sf /usr/lib64/chromium/libffmpeg.so /usr/lib64/opera
	    fi
	    [ -f /usr/lib64/chromium/libwidevinecdm.so ] && \
		ln -sf /usr/lib64/chromium/libwidevinecdm.so /usr/lib64/opera
	fi
	mygt "Upgrade packages4 done." >> $XTEMPMES
    fi
    if [ $ISFRAME -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages4/frameworks
	fi
	mygt "Upgrade frameworks done." >> $XTEMPMES
    fi
    if [ $ISOPENSHOT -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages/openshot
	fi
	mygt "Upgrade openshot done." >> $XTEMPMES
    fi
    if [ $ISAUDACITY -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages4/audacity
	fi
	mygt "Upgrade audacity done." >> $XTEMPMES
    fi
    if [ $ISARDOUR -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages4/ardour
	fi
	mygt "Upgrade ardour done." >> $XTEMPMES
    fi
    if [ $ISTESS -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    upgradedir packages4/tesseract4
	    cp packages4/tesseract4/xsane2tess* /usr/bin
	fi
	mygt "Upgrade tesseract4 done." >> $XTEMPMES
    fi
    if [ $ISBUMBLE -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    $HOMESLACK/pbslacks/pbupgradebumblebee
	fi
	mygt "Upgrade Bumblebee done." >> $XTEMPMES
    fi
    if [ "$OPTRECRE" != '' ] ;then
	if [ $XTEST -ne 1 ] ;then
	    $HOMESLACK/pbslacks/pbcompilepost -u $MYUSER -g $MYGROUP $OPTRECRE
	fi
	mygt "Recreate source packages done." >> $XTEMPMES
    fi
    if [ $ISRECREBUMBLE -eq 1 ] ;then
	if [ $XTEST -ne 1 ] ;then
	    $HOMESLACK/pbslacks/pbcompilebumblebee -u $MYUSER -g $MYGROUP
	fi
	mygt "Recreate source Bumblebee done." >> $XTEMPMES
    fi
    if [ $ISBOOTLOAD -eq 1 ] ;then
	mygt "Updating bootloader asked." >> $XTEMPMES
    fi
fi

if [ ! -f "$XTEMPMES" -o ! -s "$XTEMPMES" ] ;then
    mygt "No action was demanded. Exit." > $XTEMPMES
    XEND=1
fi

dialog --colors --backtitle 'pbupgrade' --title "$DACTION" \
       --msgbox "$(cat $XTEMPMES)" 20 80
cleanup

if [ $XEND -eq 1 ] ;then
    exit 0
fi

if [ $ISSYSTEM -eq 1 -o $ISBOOTLOAD -eq 1 ] ;then
# Only if system was modified
    if [ -d /boot/efi/EFI/Slackware ] ;then
	xitem=elilo
    elif [ -f /boot/grub/grub.cfg ] ;then
	xitem=grub
    elif [ -f /etc/lilo.conf ] ;then
	xitem=lilo
    elif [ -f /syslinux.cfg ] ;then
	xitem=syslinux
    else
	xitem=none
    fi
    pactit=$(mygt 'Bootloader menu')
    pactxt=$(mygt 'We have detected the bootloader below. Cancel if it is not true.\nIn this last case, you should recreate the config of your bootloader before reboot. Else you will have to boot from another media as a DVD or an USB stick and rerun the install of your bootloader.')
    pacnone=$(mygt 'No bootloader detected. Reconfigure your bootloader before reboot.')
    dialog --colors --backtitle 'pbupgrade' --title "$pactit" \
	--default-item $xitem --menu "$pactxt" 15 80 5 \
	elilo 'Boot Elilo : /boot/efi/EFI/Slackware' \
	grub 'Boot Grub : /boot/grub/grub.cfg' \
	lilo 'Boot Lilo : /etc/lilo.conf' \
	syslinux 'Boot Syslinux : /syslinux.cfg' \
	none "$pacnone"\
	2> $XTEMPOUT
    xitem=$(cat $XTEMPOUT)

    xmes1 () {
	mygt "\ZbThe boot loader was not updated.\ZB\nIf lilo is installed, launch : \Z3/sbin/lilo\Zn\nIf Grub is installed, launch : \Z3grub-mkconfig -o /boot/grub/grub.cfg\Zn\nIf Syslinux is installed, launch : \Z3syslinux BOOTDEVICE\Zn\nIf Boot UEFI ELILO is installed, do :\n  \Z3cp /boot/vmlinuz /boot/initrd.gz /boot/efi/EFI/Slackware\Zn\n\n\ZbOr rerun your other favorite bootloader install procedure before rebooting.\ZB"
    }

    if [ "$xitem" = elilo -a -d /boot/efi/EFI/Slackware ] ;then
	mygt "Elilo updated : Files vmlinuz et initrd.gz copied in \Z3/boot/efi/EFI/Slackware\Zn" >> $XTEMPMES
	if [ $XTEST -ne 1 ] ;then
	    cp /boot/vmlinuz /boot/initrd.gz /boot/efi/EFI/Slackware
	fi
    elif [ "$xitem" = grub -a -f /boot/grub/grub.cfg ] ;then
	mygt "Grub updated : \Z3grub-mkconfig\Zn relaunched.\n\Z1Look if there are error messages below\Zn." >> $XTEMPMES
	if [ $XTEST -ne 1 ] ;then
	    grub-mkconfig -o /boot/grub/grub.cfg 2>> $XTEMPMES
	fi
    elif [ "$xitem" = lilo -a -f /etc/lilo.conf ] ;then
	mygt "Lilo updated with \Z3/sbin/lilo\Zn.\n\Z1Look if there are error messages below\Zn." >> $XTEMPMES
	if [ $XTEST -ne 1 ] ;then
	    /sbin/lilo 2>> $XTEMPMES
	fi
    elif [ "$xitem" = syslinux -a -f /syslinux.cfg ] ;then
	mygt "Look at \Z3/syslinux.cfg\Zn and rerun \Z3syslinux\Zn on your boot partition if some path have changed." >> $XTEMPMES
    else
	xmes1 >> $XTEMPMES
    fi

    if [ -f "$XTEMPMES" ] ;then
	dialog --colors --backtitle 'pbupgrade' --title 'Bootloader upgraded' \
	    --msgbox "$(cat $XTEMPMES)" 20 80
    fi

    cleanup
fi

if [ "$XNEW" != 'yes' ] ;then
    XBOOTMES=$(mygt ' (\Z1be sure to have updated the bootloader before\Zn)')
else
    XBOOTMES=
fi

xend () {
    emygt "Reboot the host\${XBOOTMES}.\n\n\ZbThen do if not already done on an already upgraded target :\ZB\nSelect '\Z3recreate\Zn' in the above menu after launching this script again.\n or do> \Z3pbslacks/pbcompilepost\Zn\n\n\ZbIf your host is a dual graphic card laptop with a NVIDIA card :\ZB\n  \Z4Do either :\Zn\n    Select '\Z3recreatebumblebee\Zn' in the above menu after launching this script again.\n    or do> \Z3pbslacks/pbcompilebumblebee\Zn\n  \Z4Or do only if already done on an upgraded target :\Zn\n    Select '\Z3bumblebee\Zn' in the above menu after launching this script again.\n    or do> \Z3pbslacks/pbupgradebumblebee\Zn"
}

xend >> $XTEMPMES

if [ -f "$XTEMPMES" ] ;then
    dialog --colors --backtitle 'pbupgrade' --title 'End messages' \
	--msgbox "$(cat $XTEMPMES)" 20 85
fi
rm -f $XTEMPMES
