diff -ru5 qtscriptgenerator-src-0.2.0old/generator/classgenerator.cpp qtscriptgenerator-src-0.2.0/generator/classgenerator.cpp
--- qtscriptgenerator-src-0.2.0old/generator/classgenerator.cpp	2012-01-23 12:30:03.000000000 +0100
+++ qtscriptgenerator-src-0.2.0/generator/classgenerator.cpp	2022-02-19 18:50:04.612872418 +0100
@@ -1039,37 +1039,58 @@
 
 /*!
   Declares the given \a typeName if it hasn't been declared already,
   and adds it to the set of registered type names.
 */
+
 void maybeDeclareMetaType(QTextStream &stream, const QString &typeName,
                           QSet<QString> &registeredTypeNames)
 {
-    QString name = typeName;
-    if (name.endsWith(QLatin1Char('&')))
-        name.chop(1);
-    if (registeredTypeNames.contains(name) || (QMetaType::type(typeName.toLatin1()) != 0))
-        return;
-    if (name.contains(QLatin1Char(','))) {
+	QString name = typeName;
+	QString nameFootPrint = name;
+
+	nameFootPrint.replace("uint", "unsigned int");
+	nameFootPrint.replace(" ", "");
+#if 0
+	if (nameFootPrint == QLatin1String("QStringList<QString>"))
+	    return; // ### wtf...
+	if (nameFootPrint == QLatin1String("QList<QModelIndex>"))
+	    return; // ### wtf2...
+	if (nameFootPrint == QLatin1String("QSocketNotifier::Type"))
+	    return; // ### wtf3...
+#endif
+	if (nameFootPrint == QLatin1String("QList<QPair<QByteArray,QString>>"))
+	    return; // ### wtf4...
+	if (nameFootPrint == QLatin1String("QPair<QByteArray,QString>"))
+	    return; // ### wtf5...
+
+	if (registeredTypeNames.contains(nameFootPrint) || (QMetaType::type(name.toLatin1()) != 0))
+	    return;
+	
+	if (name.endsWith(QLatin1Char('&')))
+	    name.chop(1);
+	if (registeredTypeNames.contains(nameFootPrint) || (QMetaType::type(name.toLatin1()) != 0))
+	    return;
+	if (name.contains(QLatin1Char(','))) {
         // need to expand the Q_DECLARE_METATYPE macro manually,
         // otherwise the compiler will choke
-        stream << "template <> \\" << endl
-               << "struct QMetaTypeId< " << name << " > \\" << endl
-               << "{ \\" << endl
-               << "    enum { Defined = 1 }; \\" << endl
-               << "    static int qt_metatype_id() \\" << endl
-               << "    { \\" << endl
-               << "        static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \\" << endl
-               << "        if (!metatype_id) \\" << endl
-               << "            metatype_id = qRegisterMetaType< " << name << " >(\"" << name << "\"); \\" << endl
-               << "        return metatype_id; \\" << endl
-               << "    } \\" << endl
-               << "};" << endl;
-    } else {
-        stream << "Q_DECLARE_METATYPE(" << name << ")" << endl;
-    }
-    registeredTypeNames << name;
+	    stream << "template <> \\" << endl
+		   << "struct QMetaTypeId< " << name << " > \\" << endl
+		   << "{ \\" << endl
+		   << "    enum { Defined = 1 }; \\" << endl
+		   << "    static int qt_metatype_id() \\" << endl
+		   << "    { \\" << endl
+		   << "        static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \\" << endl
+		   << "        if (!metatype_id) \\" << endl
+		   << "            metatype_id = qRegisterMetaType< " << name << " >(\"" << name << "\"); \\" << endl
+		   << "        return metatype_id; \\" << endl
+		   << "    } \\" << endl
+		   << "};" << endl;
+	} else {
+	    stream << "Q_DECLARE_METATYPE(" << name << ")" << endl;
+	}
+	registeredTypeNames << nameFootPrint;
 }
 
 /*!
   Declares the given \a type recursively (i.e. subtypes of a composite
   type are also declared).
diff -ru5 qtscriptgenerator-src-0.2.0old/generator/setupgenerator.cpp qtscriptgenerator-src-0.2.0/generator/setupgenerator.cpp
--- qtscriptgenerator-src-0.2.0old/generator/setupgenerator.cpp	2012-01-23 12:30:03.000000000 +0100
+++ qtscriptgenerator-src-0.2.0/generator/setupgenerator.cpp	2022-02-19 16:31:44.258599514 +0100
@@ -1,40 +1,40 @@
 /****************************************************************************
 **
-** Copyright (C) 2008-2009 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
+** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the Qt Script Generator project on Qt Labs.
 **
 ** $QT_BEGIN_LICENSE:LGPL$
-** No Commercial Usage
-** This file contains pre-release code and may not be distributed.
-** You may use this file in accordance with the terms and conditions
-** contained in the Technology Preview License Agreement accompanying
-** this package.
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
 ** General Public License version 2.1 as published by the Free Software
 ** Foundation and appearing in the file LICENSE.LGPL included in the
 ** packaging of this file.  Please review the following information to
 ** ensure the GNU Lesser General Public License version 2.1 requirements
 ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
-** In addition, as a special exception, Nokia gives you certain additional
-** rights.  These rights are described in the Nokia Qt LGPL Exception
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** If you have questions regarding the use of this file, please contact
-** Nokia at qt-info@nokia.com.
-**
-**
-**
-**
-**
-**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
 **
 **
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -62,10 +62,11 @@
     while (pack.hasNext()) {
         pack.next();
         QList<const AbstractMetaClass*> list = pack.value();
         if (list.isEmpty())
             continue;
+        std::sort(list.begin(), list.end());
 
         QString packName = pack.key();
         QStringList components = packName.split(".");
         if ((components.size() > 2) && (components.at(0) == "com")
             && (components.at(1) == "trolltech")) {
diff -ru5 qtscriptgenerator-src-0.2.0old/qtbindings/qtbindingsbase.pri qtscriptgenerator-src-0.2.0/qtbindings/qtbindingsbase.pri
--- qtscriptgenerator-src-0.2.0old/qtbindings/qtbindingsbase.pri	2012-01-23 12:30:03.000000000 +0100
+++ qtscriptgenerator-src-0.2.0/qtbindings/qtbindingsbase.pri	2022-02-19 17:58:59.879099855 +0100
@@ -1,8 +1,11 @@
 TEMPLATE = lib
 DEPENDPATH += .
 INCLUDEPATH += .
+QMAKE_CXXFLAGS += $$(CXXFLAGS)
+QMAKE_CFLAGS += $$(CFLAGS)
+QMAKE_LFLAGS += $$(LDFLAGS)
 DESTDIR = $$PWD/../plugins/script
 QT += script
 CONFIG += debug_and_release
 GENERATEDCPP = $$PWD/../generated_cpp
 TARGET=$$qtLibraryTarget($$TARGET)
