#!/bin/sh
# GCC package build script (written by volkerdi@slackware.com)
#
# Copyright 2003, 2004  Slackware Linux, Inc., Concord, California, USA
# Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

PRGNAM=gcc8
VERSION=${VERSION:-8.1.0}
MAJVER=$(echo ${VERSION} |cut -d. -f1)
BUILD=${BUILD:-1}
TAG=${TAG:-_PB}

# How many jobs to run in parallel:
NUMJOBS=" -j7 "

LANGS=${LANGS:-'c,c++'}
echo "Building these compilers: $LANGS"; sleep 5

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
    case "$(uname -m)" in
	i?86) ARCH=i586 ;;
	arm*) readelf /usr/bin/file -A | egrep -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
	*) ARCH=$(uname -m) ;;
    esac
    export ARCH
fi

if [ "$ARCH" = "i386" ]; then
    SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=i386
elif [ "$ARCH" = "i486" ]; then
    SLKCFLAGS="-O2 -march=i486 -mtune=i686"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=i386
elif [ "$ARCH" = "i586" ]; then
    SLKCFLAGS="-O2 -march=i586 -mtune=i686"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=i386
elif [ "$ARCH" = "i686" ]; then
    SLKCFLAGS="-O2 -march=i686"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=i386
elif [ "$ARCH" = "s390" ]; then
    SLKCFLAGS="-O2"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=s390
elif [ "$ARCH" = "x86_64" ]; then
    SLKCFLAGS="-O2 -fPIC"
    SLKLDFLAGS="-L/usr/lib64"
    LIBDIRSUFFIX="64"
    LIB_ARCH=amd64
elif [ "$ARCH" = "armv7hl" ]; then
    SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=armv7hl
else
    SLKCFLAGS="-O2"
    SLKLDFLAGS=""
    LIBDIRSUFFIX=""
    LIB_ARCH=$ARCH
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabi ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

if [ "$ARCH" = "x86_64" ]; then
    if [ -f /usr/lib/libc.a ]; then
	GCC_ARCHOPTS="--enable-multilib"
	MULTILIB="YES"
    else
	GCC_ARCHOPTS="--disable-multilib"
	MULTILIB="NO"
    fi
else
    GCC_ARCHOPTS="--with-arch=$ARCH"
    MULTILIB="NO"
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/PB}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
mkdir -p $PKG/install
if [ ${MULTILIB} = "YES" ]; then
    SLDESC="  The compilers support multilib."
else
    SLDESC=""
fi

cat $CWD/slack-desc.gcc8 | sed -e "s/@MULTILIB@/${SLDESC}/" \
			       > $PKG/install/slack-desc

# Unpack the gcc sources:
cd $TMP
tar xvf $CWD/gcc-$VERSION.tar.?z

# install docs
( cd gcc-$VERSION
  # Add retpoline support:
  cat $CWD/patches/0000-isl.patch | patch -p1 --verbose || exit 1
  cat $CWD/patches/0001-ustat.patch | patch -p1 --verbose || exit 1
  cat $CWD/patches/0002-libsanitizer.patch | patch -p1 --verbose || exit 1
  
  mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
  cp -a \
     COPYING* ChangeLog* INSTALL \
     LAST_UPDATED MAINTAINERS NEWS README* \
     $PKG/usr/doc/$PRGNAM-$VERSION

  # We will keep part of these, but they are really big...
  if [ -r ChangeLog ]; then
      DOCSDIR=$(echo $PKG/usr/doc/$PRGNAM-$VERSION)
      cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
      touch -r ChangeLog $DOCSDIR/ChangeLog
  fi
  if [ -r NEWS ]; then
      DOCSDIR=$(echo $PKG/usr/doc/$PRGNAM-$VERSION)
      cat NEWS | head -n 1000 > $DOCSDIR/NEWS
      touch -r NEWS $DOCSDIR/NEWS
  fi

  mkdir -p $PKG/usr/doc/$PRGNAM-${VERSION}/gcc
  ( cd gcc
    cp -a \
       ABOUT* COPYING* DATESTAMP DEV-PHASE LANG* ONEWS README* \
       $PKG/usr/doc/$PRGNAM-$VERSION/gcc
  ) || exit 1

  mkdir -p $PKG/usr/doc/$PRGNAM-${VERSION}/libffi
  ( cd libffi
    cp -a \
       ChangeLog.libgcj ChangeLog.v1 \
       LICENSE* README* \
       $PKG/usr/doc/$PRGNAM-${VERSION}/libffi
    if [ -r ChangeLog ]; then
	cat ChangeLog | head -n 1000 > $PKG/usr/doc/$PRGNAM-${VERSION}/libffi/ChangeLog
	touch -r ChangeLog $PKG/usr/doc/$PRGNAM-${VERSION}/libffi/ChangeLog
    fi
  )

  if [ -d libmudflap ]; then
      mkdir -p $PKG/usr/doc/$PRGNAM-${VERSION}/libmudflap
      ( cd libmudflap
	if [ -r ChangeLog ]; then
            cat ChangeLog | head -n 1000 > $PKG/usr/doc/$PRGNAM-${VERSION}/libmudflap/ChangeLog
            touch -r ChangeLog $PKG/usr/doc/$PRGNAM-${VERSION}/libmudflap/ChangeLog
	fi
      )
  fi

  mkdir -p $PKG/usr/doc/$PRGNAM-${VERSION}/libgomp
  ( cd libgomp
    if [ -r ChangeLog ]; then
	cat ChangeLog | head -n 1000 > $PKG/usr/doc/$PRGNAM-${VERSION}/libgomp/ChangeLog
	touch -r ChangeLog $PKG/usr/doc/$PRGNAM-${VERSION}/libgomp/ChangeLog
    fi
  )
  
  mkdir -p $PKG/usr/doc/$PRGNAM-${VERSION}/libstdc++-v3
  ( cd libstdc++-v3
    cp -a \
       README* \
       doc/html/faq.html \
       $PKG/usr/doc/$PRGNAM-${VERSION}/libstdc++-v3
    if [ -r ChangeLog ]; then
	cat ChangeLog | head -n 1000 > $PKG/usr/doc/$PRGNAM-${VERSION}/libstdc++-v3/ChangeLog
	touch -r ChangeLog $PKG/usr/doc/$PRGNAM-${VERSION}/libstdc++-v3/ChangeLog
    fi
  )
  chown -R root.root $PKG/usr/doc
)

# build gcc
( mkdir gcc.build.lnx;
  cd gcc.build.lnx;

  # I think it's incorrect to include this option (as it'll end up set
  # to i586 on x86 platforms), and we want to tune the binary structure
  # for i686, as that's where almost all of the optimization speedups
  # are to be found.
  # Correct me if my take on this is wrong.
  #  --with-cpu=$ARCH 
  
  # NOTE:  For Slackware 15.0, look into removing --with-default-libstdcxx-abi=gcc4-compatible,
  # which will then require rebuilding all C++ libraries.  That is, if there's any benefit.
  LDFLAGS="$SLKLDFLAGS" \
	 CFLAGS="$SLKCFLAGS" \
	 CXXFLAGS="$SLKCFLAGS" \
	 ../gcc-$VERSION/configure \
	 --prefix=/usr \
	 --libdir=/usr/lib$LIBDIRSUFFIX \
	 --mandir=/usr/man \
	 --infodir=/usr/info \
	 --enable-shared \
	 --enable-bootstrap \
	 --enable-languages=${LANGS} \
	 --enable-threads=posix \
	 --enable-checking=release \
	 --enable-objc-gc \
	 --with-system-zlib \
	 --with-python-dir=/lib$LIBDIRSUFFIX/python2.7/site-packages \
	 --enable-libstdcxx-dual-abi \
	 --disable-libunwind-exceptions \
	 --enable-__cxa_atexit \
	 --enable-libssp \
	 --enable-lto \
	 --disable-install-libiberty \
	 --with-gnu-ld \
	 --verbose \
	 --with-arch-directory=$LIB_ARCH \
	 --program-suffix=-${MAJVER} \
	 --enable-version-specific-runtime-libs \
	 $GCC_ARCHOPTS \
	 --target=${TARGET} \
	 --build=${TARGET} \
	 --host=${TARGET} || exit 1

  # Start the build:

  # Include all debugging info (for now):
  make $NUMJOBS bootstrap
  make info
  make install DESTDIR=$PKG

  # KLUDGE ALERT
  # These *gdb.py files are causing ldconfig to complain, so they are going
  # to be REMOVED for now...  at some point, they might be moved somewhere
  # else, in which case things should Just Work(tm).  Keep an eye on it.
  rm -f $PKG/usr/lib*/*gdb.py

  # Be sure the "specs" file is installed.
  if [ ! -r $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs ]; then
      cat stage1-gcc/specs > $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs
  fi

  if [ ${MULTILIB} = "NO" ]; then
      # Make our 64bit gcc look for 32bit gcc binaries in ./32 subdirectory
      # (only needed if gcc was compiled with disable-multilib):
      if [ "$ARCH" = "x86_64" ]; then
	  sed -i 's#;.\(:../lib !m64 m32;\)$#;32\1#' \
	      $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs
      fi
  fi

  make -i install-info DESTDIR=$PKG

  # Move potentially conflicting stuff to version specific subdirectory:
  if [ -d $PKG/usr/lib${LIBDIRSUFFIX} ]; then
      mv $PKG/usr/lib${LIBDIRSUFFIX}/lib* $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/
  fi
  if [ -d $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/lib${LIBDIRSUFFIX}/ ]; then
      mv $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/lib${LIBDIRSUFFIX}/lib* \
	 $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/
  fi
  chmod 755 $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/libgcc_s.so.1
  if [ ${MULTILIB} = "YES" ]; then
      if [ -d $PKG/usr/lib ]; then
	  mv $PKG/usr/lib/lib* $PKG/usr/lib/gcc/${TARGET}/${VERSION}/
      fi
      if [ -d $PKG/usr/lib/gcc/${TARGET}/lib/ ]; then
	  mv $PKG/usr/lib/gcc/${TARGET}/lib/lib* $PKG/usr/lib/gcc/${TARGET}/${VERSION}/
      fi
      chmod 755 $PKG/usr/lib/gcc/${TARGET}/${VERSION}/libgcc_s.so.1
  fi

  # Fix stuff up:
  ( cd $PKG/usr/info
    rm dir
    for eachinfo in *.info ; do
	mv $eachinfo $(basename $eachinfo .info)-${MAJVER}.info
    done
    gzip -9 *
  )

  ( cd $PKG/usr/bin
    ln -sf g++-${MAJVER} c++-${MAJVER}
    ln -sf gcc-${MAJVER} cc-${MAJVER}
  )

  ( cd $PKG/usr/man
    rm -r man7  # Part of the system gcc package
    gzip -9 */*
    cd man1
    ln -sf g++-${MAJVER}.1.gz c++-${MAJVER}.1.gz
    ln -sf gcc-${MAJVER}.1.gz cc-${MAJVER}.1.gz
  )  

  # keep a log
) 2>&1 | tee $TMP/gcc.build.log

# Add profile scripts (non-executable by default) to make it easier
# to set the environment for compiling with gcc8:
mkdir -p $PKG/etc/profile.d
cat $CWD/profile.d/gcc8.sh > $PKG/etc/profile.d/gcc8.sh
cat $CWD/profile.d/gcc8.csh > $PKG/etc/profile.d/gcc8.csh
chmod 644  $PKG/etc/profile.d/*

# Filter all .la files (thanks much to Mark Post for the sed script):
( cd $PKG
  for file in $(find . -type f -name "*.la") ; do
      cat $file | sed -e 's%-L'${TMP}'[[:graph:]]* % %g' > $TMP/tmp-la-file
      cat $TMP/tmp-la-file > $file
  done
  rm $TMP/tmp-la-file
)

## Strip bloated binaries and libraries:
( cd $PKG
  find . -name "lib*so*" -exec strip --strip-unneeded "{}" \;
  find . -name "lib*a" -exec strip -g "{}" \;
  strip --strip-unneeded usr/bin/* 2> /dev/null
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

# Remove localizations overlapping with Slackware's gcc
rm -rf $PKG/usr/share/locale

( cd $PKG
  if [ ${MULTILIB} = "YES" ]; then
      /sbin/makepkg -l y -c n $OUTPUT/${PRGNAM}-${VERSION}_multilib-$ARCH-$BUILD$TAG.txz
  else
      /sbin/makepkg -l y -c n $OUTPUT/${PRGNAM}-${VERSION}-$ARCH-$BUILD$TAG.txz
  fi
)

