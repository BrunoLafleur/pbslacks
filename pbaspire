#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

. "$(dirname $0)/pbinclude"

xhelp () {
    mygt 'Launch this script in a new directory.\nor in a directory which contains slackware64-current.\n\npbslacks should be side by side of this current directory.'|sed 's@\\n@\n@g'
    echo
    echo '> ../pbslacks/pbaspire [-test (test only, no actions)] [-help|-h] [-nodial]'
}

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-test" ] ;then
	XTEST=1
    elif [ "$MYARG" = "-nodial" ] ;then
	ISDIAL=0
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
	xhelp
	exit 0
    fi
    shift
done

if [ $XTEST -ne 1 -a "$0" != "../pbslacks/$MYPROG" \
    -a "$0" != "pbslacks/$MYPROG" ] ;then
    xhelp
    exit 1
fi

PBNAME=$0
XTEMPOUT=$(mktemp -p /tmp -t pbaspireout.XXXXXX)
XTEMPMES=$(mktemp -p /tmp -t pbaspiremes.XXXXXX)
XTEMPCHK=$(mktemp -p /tmp -t pbaspirechk.XXXXXX)

cleanup () {
    rm -f $XTEMPOUT
    rm -f $XTEMPMES
    rm -f $XTEMPCHK
}

trap 'echo "*** Ctrl-C caught -- aborting operations ***"; cleanup; exit 1' 2 14 15 # trap Ctrl-C and kill

CORE=$(mygt 'Get/Update versus officiel Slackware')
MULTI=$(mygt 'Get/Update multilib compat 32 bits mode')
FRAMEW=$(mygt 'Get/Update frameworks libraries of KDE5')
GPARTED=$(mygt 'Get/Update GParted live iso')
VBOX=$(mygt 'Get/Update VirtualBox installer')
ALIEN=$(mygt 'Get/Update some Alien Bob binary packages')
PONCE=$(mygt 'Get/Update some Ponce binary packages')
SLONLY=$(mygt 'Get/Update some Slackonly binary packages')
OTHER=$(mygt 'Get/Update some Conraid or Slackel binary packages')
SOURCES=$(mygt 'Get/Update some other source packages')
MOZILLA=$(mygt 'Get/Update latest Firefox and Thunderbird')
CHECK=$(mygt 'Check GPG signatures')

xmaster () {
    defitem=$1;shift
    xsel1=$1;shift;xsel2=$1;shift;xsel3=$1;shift;xsel4=$1;shift;xsel5=$1;shift
    xsel6=$1;shift;xsel7=$1;shift;xsel8=$1;shift;xsel9=$1;shift;xsel10=$1;shift
    xsel11=$1;shift;xsel12=$1
    pactit=$(mygt 'Main menu');pactit="pbaspire: $pactit"
    pactxt=$(mygt 'Choose your actions below')
    if [ $ISDIAL -eq 1 ] ;then
	dialog --colors --backtitle 'pbaspire' --title "$pactit" \
	    --default-item $defitem --defaultno --separate-output --item-help \
	    --help-button --help-status --checklist "$pactxt" 0 100 12 \
	    core "$CORE" $xsel1 core \
	    multi "$MULTI" $xsel2 multi \
	    framew "$FRAMEW" $xsel3 framew \
	    gparted "$GPARTED" $xsel4 gparted \
	    vbox "$VBOX" $xsel5 vbox \
	    alien "$ALIEN" $xsel6 alien \
	    ponce "$PONCE" $xsel7 ponce \
	    slonly "$SLONLY" $xsel8 slonly \
	    other "$OTHER" $xsel9 other \
	    sources "$SOURCES" $xsel10 sources \
	    mozilla "$MOZILLA" $xsel11 mozilla \
	    check "$CHECK" $xsel12 check
    else
	echo '------------------------------------'
	echo "        $pactit"
	echo '------------------------------------'
	echo "HELP (y or n) :";read c
	if [ "$c" = "y" ] ;then
	    echo "HELP core (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP core" 1>&2;return;fi
	    echo "HELP multi (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP multi" 1>&2;return;fi
	    echo "HELP framew (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP framew" 1>&2;return;fi
	    echo "HELP gparted (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP gparted" 1>&2;return;fi
	    echo "HELP virtualbox (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP vbox" 1>&2;return;fi
	    echo "HELP alien (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP alien" 1>&2;return;fi
	    echo "HELP ponce (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP ponce" 1>&2;return;fi
	    echo "HELP slonly (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP slonly" 1>&2;return;fi
	    echo "HELP other (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP other" 1>&2;return;fi
	    echo "HELP sources (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP sources" 1>&2;return;fi
	    echo "HELP mozilla (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP mozilla" 1>&2;return;fi
	    echo "HELP check (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP check" 1>&2;return;fi
	fi
	echo "$CORE (y or n) :";read c
	[ "$c" = "y" ] && echo "core" 1>&2
	echo "$MULTI (y or n) :";read c
	[ "$c" = "y" ] && echo "multi" 1>&2
	echo "$FRAMEW (y or n) :";read c
	[ "$c" = "y" ] && echo "framew" 1>&2
	echo "$GPARTED (y or n) :";read c
	[ "$c" = "y" ] && echo "gparted" 1>&2
	echo "$VBOX (y or n) :";read c
	[ "$c" = "y" ] && echo "vbox" 1>&2
	echo "$ALIEN (y or n) :";read c
	[ "$c" = "y" ] && echo "alien" 1>&2
	echo "$PONCE (y or n) :";read c
	[ "$c" = "y" ] && echo "ponce" 1>&2
	echo "$SLONLY (y or n) :";read c
	[ "$c" = "y" ] && echo "slonly" 1>&2
	echo "$OTHER (y or n) :";read c
	[ "$c" = "y" ] && echo "other" 1>&2
	echo "$SOURCES (y or n) :";read c
	[ "$c" = "y" ] && echo "sources" 1>&2
	echo "$MOZILLA (y or n) :";read c
	[ "$c" = "y" ] && echo "mozilla" 1>&2
	echo "$CHECK (y or n) :";read c
	[ "$c" = "y" ] && echo "check" 1>&2
    fi
}

xsel="on on on on on on on on on on on on on"
ditem=core
bclaide=1

while [ $bclaide -eq 1 ] ;do
    xmaster $ditem $xsel 2> $XTEMPOUT
    bclaide=$(cat $XTEMPOUT|grep '^HELP'|wc -l)
    if [ $bclaide -eq 1 ] ;then
	xitem="$(cat $XTEMPOUT|grep '^HELP'|cut -d ' ' -f2)"
	xsel=
	for i in core multi framew gparted vbox alien ponce slonly other sources mozilla check ;do
	  if [ $(grep "^$i$" "$XTEMPOUT"|wc -l) -eq 1 ] ;then
	      xsel="$xsel on"
	  else
	      xsel="$xsel off"
	  fi
	done
	ditem=$xitem;bclaide=1;pacaide=
	if [ "$xitem" = core ] ;then
	    pacaide=$(mygt 'Get or update the officiel lastest current Slackware.')
	elif [ "$xitem" = multi ] ;then
	    pacaide=$(mygt 'Get or update the multilib of Alien Bob which is a 32 bits compatibility set of packages.')
	elif [ "$xitem" = framew ] ;then
	    pacaide=$(mygt 'Get or update the frameworks libraries of Kde5 offered by Alien Bob.')
	elif [ "$xitem" = gparted ] ;then
	    pacaide=$(mygt 'Get or update the GParted live ISO.')
	elif [ "$xitem" = vbox ] ;then
	    pacaide=$(mygt 'Get or update the VirtualBox installer and extensions.')
	elif [ "$xitem" = alien ] ;then
	    pacaide=$(mygt 'Get or update some Alien Bob binary packages.')
	elif [ "$xitem" = ponce ] ;then
	    pacaide=$(mygt 'Get or update some Ponce binary packages.')
	elif [ "$xitem" = slonly ] ;then
	    pacaide=$(mygt 'Get or update some Slackonly binary packages.')
	elif [ "$xitem" = other ] ;then
	    pacaide=$(mygt 'Get or update some Conraid and Slackel binary packages.')
	elif [ "$xitem" = sources ] ;then
	    pacaide=$(mygt 'Get or update some other source packages.')
	elif [ "$xitem" = mozilla ] ;then
	    pacaide=$(mygt 'Get or update Firefox and Thunderbird.')
	elif [ "$xitem" = check ] ;then
	    pacaide=$(mygt 'Check the GPG signatures of the downloaded packages.')
	fi
	if [ $ISDIAL -eq 1 ] ;then
	    dialog --colors --backtitle 'pbaspire' --title "$xitem" \
		--msgbox "$pacaide" 20 80
	else
	    echo '------------------------------------'
	    echo "          $xitem"
	    echo '------------------------------------'
	    echo "$pacaide"|sed 's@\\n@\n@g'
	fi
    fi
done

ISCORE="$(cat $XTEMPOUT|grep '^core$'|wc -l)"
ISMULTI="$(cat $XTEMPOUT|grep '^multi$'|wc -l)"
ISFRAMEW="$(cat $XTEMPOUT|grep '^framew$'|wc -l)"
ISGPARTED="$(cat $XTEMPOUT|grep '^gparted$'|wc -l)"
ISVBOX="$(cat $XTEMPOUT|grep '^vbox$'|wc -l)"
ISALIEN="$(cat $XTEMPOUT|grep '^alien$'|wc -l)"
ISPONCE="$(cat $XTEMPOUT|grep '^ponce$'|wc -l)"
ISSLONLY="$(cat $XTEMPOUT|grep '^slonly$'|wc -l)"
ISOTHER="$(cat $XTEMPOUT|grep '^other$'|wc -l)"
ISSOURCES="$(cat $XTEMPOUT|grep '^sources$'|wc -l)"
ISMOZ="$(cat $XTEMPOUT|grep '^mozilla$'|wc -l)"
ISCHECK="$(cat $XTEMPOUT|grep '^check$'|wc -l)"

COREATTR=
[ $ISCORE -eq 1 ] && COREATTR="$COREATTR -core"
[ $ISMULTI -eq 1 ] && COREATTR="$COREATTR -multi"
[ $ISFRAMEW -eq 1 ] && COREATTR="$COREATTR -framew"
[ $ISGPARTED -eq 1 ] && COREATTR="$COREATTR -gparted"
[ $ISVBOX -eq 1 ] && COREATTR="$COREATTR -vbox"
[ $ISCHECK -eq 1 ] && COREATTR="$COREATTR -check"

if [ "$COREATTR" != '' ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"core $COREATTR $XTEMPCHK
fi

[ $ISCORE -eq 1 ] && emygt "Get/Upgrade core system done : \Z3\${PBNAME}core\Zn." >> $XTEMPMES
[ $ISMULTI -eq 1 ] && emygt "Get/Upgrade multilib compat 32 bits mode done : \Z3\${PBNAME}core\Zn." \
	>> $XTEMPMES
[ $ISFRAMEW -eq 1 ] && emygt "Get/Upgrade framewoks libraries KDE5 done : \Z3\${PBNAME}core\Zn." \
	>> $XTEMPMES
[ $ISGPARTED -eq 1 ] && emygt "Get/Upgrade gparted live iso done : \Z3\${PBNAME}core\Zn." \
	>> $XTEMPMES
[ $ISVBOX -eq 1 ] && emygt "Get/Upgrade VirtualBox installer done : \Z3\${PBNAME}core\Zn." \
	>> $XTEMPMES

if [ $ISALIEN -eq 1 ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"alien
    emygt "Get/Upgrade Alien Bob packages done : \Z3\${PBNAME}alien\Zn." \
	>> $XTEMPMES
fi
if [ $ISPONCE -eq 1 ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"ponce
    emygt "Get/Upgrade Ponce packages done : \Z3\${PBNAME}ponce\Zn." >> $XTEMPMES
fi
if [ $ISSLONLY -eq 1 ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"slonly
    emygt "Get/Upgrade Slackonly packages done : \Z3\${PBNAME}slonly\Zn." \
	>> $XTEMPMES
fi
if [ $ISOTHER -eq 1 ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"other
    emygt "Get/Upgrade Conraid and Slackel binary packages done : \Z3\${PBNAME}other\Zn." \
	>> $XTEMPMES
fi
if [ $ISSOURCES -eq 1 ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"sources
    emygt "Get/Upgrade other source packages done : \Z3\${PBNAME}sources\Zn." \
	>> $XTEMPMES
fi
if [ $ISMOZ -eq 1 ] ;then
    [ $XTEST -ne 1 ] && "$PBNAME"moz -lang fr
    emygt "Get/Upgrade Firefox and Thunderbird done : \Z3\${PBNAME}mozilla\Zn." \
	>> $XTEMPMES
fi
if [ $ISCHECK -eq 1 ] ;then
    emygt "GPG signatures checked :"
    cat $XTEMPCHK >> $XTEMPMES
fi

rm -f $XTEMPOUT
rm -f $XTEMPCHK

if [ ! -f "$XTEMPMES" -o $(cat "$XTEMPMES"|wc -c) -eq 0 ] ;then
    mygt "No action was demanded. Exit." > $XTEMPMES
fi

DACTION=$(mygt 'Actions which were done')

if [ $ISDIAL -eq 1 ] ;then
    dialog --colors --backtitle 'pbaspire' --title "$DACTION" \
	--msgbox "$(cat $XTEMPMES)" 20 90
else
    nodialog "$DACTION" $XTEMPMES
fi

rm -f $XTEMPMES
