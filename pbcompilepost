#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

# Recompilations a faire apres reboot.

. "$(dirname $0)/pbinclude"
. "$(dirname $0)/pbupgradeinc"
. "$(dirname $0)/pbcompileinc"

if [ ! $UID = 0 ]; then
    mygt 'This script must be done as root. Exit.'
    exit 1
fi

xhelp () {
    mygt 'Launch this script in the directory including packages, packages2 et al.'
    echo
    echo "> pbslacks/$MYPROG"
}

if [ ! -d packages -o ! -d packages2 -o ! -d packages3 -o ! -d packages4 -o \
       '(' ! -h pbslacks -a ! -d pbslacks ')' ] ;then
    xhelp
    exit 1
fi

MYUSER=produits
MYGROUP=users
RECOMP=1
ISALL=1
ISPAC1=0
ISPAC2=0
ISPAC3=0
ISPAC4=0
ISCALIBRE=0
ISCHROMIUM=0
ISOPENSHOT=0
ISPITIVI=0
ISAUDACITY=0
ISARDOUR=0
ISFRAMEW=0
ISLMMS=0

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-u" ] ;then
	shift
	MYUSER="$1"
    elif [ "$MYARG" = "-g" ] ;then
	shift
	MYGROUP="$1"
    elif [ "$MYARG" = "-norecomp" ] ;then
        RECOMP=0
    elif [ "$MYARG" = "-ispac1" ] ;then
	ISPAC1=1;ISALL=0
    elif [ "$MYARG" = "-ispac2" ] ;then
	ISPAC2=1;ISALL=0
    elif [ "$MYARG" = "-ispac3" ] ;then
	ISPAC3=1;ISALL=0
    elif [ "$MYARG" = "-ispac4" ] ;then
	ISPAC4=1;ISALL=0
    elif [ "$MYARG" = "-ischromium" ] ;then
	ISCHROMIUM=1;ISALL=0
    elif [ "$MYARG" = "-isopenshot" ] ;then
	ISOPENSHOT=1;ISALL=0
    elif [ "$MYARG" = "-iscalibre" ] ;then
	ISCALIBRE=1;ISALL=0
    elif [ "$MYARG" = "-ispitivi" ] ;then
	ISPITIVI=1;ISALL=0
    elif [ "$MYARG" = "-isaudacity" ] ;then
	ISAUDACITY=1;ISALL=0
    elif [ "$MYARG" = "-isardour" ] ;then
	ISARDOUR=1;ISALL=0
    elif [ "$MYARG" = "-islmms" ] ;then
	ISLMMS=1;ISALL=0
    elif [ "$MYARG" = "-isframew" ] ;then
	ISFRAMEW=1;ISALL=0
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
	xhelp
	exit 0
    fi
    shift
done

if [ $ISALL -eq 1 ] ;then
    ISPAC1=1
    ISPAC2=1
    ISPAC3=1
    ISPAC4=1
    ISCALIBRE=1
    ISCHROMIUM=1
    ISOPENSHOT=1
    ISPITIVI=1
    ISAUDACITY=1
    ISARDOUR=1
    ISFRAMEW=1
    ISLMMS=1
fi

mygt 'Only after a system update and reboot.\nIf already done on this or another machine, this script is not useful.\nPress a touch for continue or abort.'|sed 's@\\n@\n@g'
read c

# ===========================================================
# Some helper functions.

# ===========================================================
rm -f $XLIBDIR/lib*.la
XNPROC=$(nproc)
export CMAKE_BUILD_PARALLEL_LEVEL=$XNPROC
export MAKEFLAGS="-j$XNPROC"
export PKGTYPE=txz
export TAG=_PB
# ===========================================================

if [ $ISPAC1 -eq 1 ] ;then
    rm -f packages4/gst-plugins-bad-[0-9]*ponce.t?z*
    for i in libtxc_dxtn libgaminggear acpibrightness gst-plugins-bad \
			 dawconfig hplip-plugin ;do
	xmakepac packages $i
    done

    # mlt python3 recompiled with new libs.
    # On recompile pour dependances jackrack, rubberband, swfdec.
    (
	rm -f packages*/*-3alien*.t?z
	rm -f packages/32/*-3alien*.t?z
	export BUILD=1PB
	#xmakealienpac packages mlt
	xmakealienpac source/l mlt packages
    )

    # 32 bits packages
    if [ $PBARCH = x64 ] ;then
	(
	    export ARCH=i486
	    for i in openal-soft libtxc_dxtn ;do
		xmakepac packages $i 32
	    done
	)
	[ $? -ne 0 ] && exit 1
	(
	    cd packages/32
	    for i in cabextract libdvdcss icoutils wxPython openal-soft \
				libtxc_dxtn ;do
		if [ $RECOMP -eq 1 ] ;then
		    (
			unset TAG
			convertpkg-compat32 -i "$i-"'*.t?z' -d ../compat32
			chown ${MYUSER}.$MYGROUP ../compat32/$i-compat32-*.t?z
		    )
		fi
		xpurgetmp ${i}-compat32
		upgradepkg --install-new --reinstall ../compat32/$i-compat32-*.t?z
		rm -f /usr/lib/lib*.la
	    done
	)
	[ $? -ne 0 ] && exit 1
    fi

    # Recompile and reinstall some Slackware packages for new dependencies.
    (
	export X264=yes
	export X265=yes
	export OPENAL=yes
	export AAC=yes
	export AOM=yes
	export DAV1D=yes
	xmakealienpac source/l ffmpeg packages
    )
    [ $? -ne 0 ] && exit 1
    # For reenabling --enable-obsolete-nsl and --enable-obsolete-rpc which
    # I need. Recompile the multilib version.
    # Else use the tirpc lib (/usr/include/tirpc, libtirpc).
    if [ ] ;then
	if [ $(ls /var/log/packages/glibc-[0-9]*_multilib-x86_64-*alien \
		  2> /dev/null|wc -l) -eq 1 ] ;then
	    cp -a source/l/glibc/* packages/glibc
	    (
		cd packages/glibc
		cp glibc-multilib.SlackBuild glibc.SlackBuild
	    )
	    xmakealienpac packages glibc
	    for i in glibc-i18n glibc-profile glibc-solibs ;do
		xcleanpac $i packages
		upgradepkg --install-new --reinstall packages/${i}-[0-9m]*.t?z
	    done
	fi
    fi
    xhookpac1
fi

if [ $ISOPENSHOT -eq 1 ] ;then
    # python2-* for openshot 1.4, openshot_qt => openshot 2.5
    for i in gstreamer0 gst-plugins-base0 python2-mlt \
			python2-libcaca python2-libwebp python-pillow6 \
			zeromq protobuf libopenshot-audio libopenshot \
			openshot_qt lxml inkscape pybind11 \
			openimageio opencolorio numpy3 tbb Blender openshot ;do
	xmakepac packages/openshot $i
    done
    xhookopenshot
fi

if [ $ISPITIVI -eq 1 ] ;then
    for i in blas lapack scipy3 python3-dateutil python3-cycler \
			      python3-kiwisolver python3-pyparsing \
			      python3-tornado pytz python3-matplotlib \
			      gstreamer-editing-services gst-python3 gsound \
			      libpeas pitivi ;do
	xmakepac packages/pitivi $i
    done
    xhookpitivi
fi

if [ $ISPAC2 -eq 1 ] ;then    
    # More 64 bits packages
    for i in roccat-tools kmplayer denemo guile2.2 discord PyYAML lutris \
	     lsdvd ;do
	xmakepac packages2 $i
    done
    xhookpac2
fi

if [ $ISPAC3 -eq 1 ] ;then    
    for i in bsddb3 db53 pyicu gramps goocanvas2 msgpack-python ;do
	xmakepac packages3 $i
    done
    xhookpac3
fi

if [ $ISCALIBRE -eq 1 ] ;then
    (
	# Cleaning old Calibre or aborted package generation.
	removepkg calibre
	rm -f /tmp/calibre_pythondeps-*.tar.bz2
	rm -rf $XLIBDIR/calibre
	rm -f /usr/bin/sip # Generated by calibre.SlackBuild
	ln -s /usr/bin/sip2 /usr/bin/sip
	upgradepkg --reinstall slackware64/l/PyQt5-*.t?z
	export BUILD_PYTHONMODS=YES
	export CFLAGS='-DU_DEFINE_FALSE_AND_TRUE=1'
	cp "$(pwd)/pbslacks/builds/alien/calibre_icu.patch" \
	   packages3/calibre/patches
	xmakealienpac packages3 calibre
	xhookcalibre
    )
    [ $? -ne 0 ] && exit 1
fi

if [ $ISFRAMEW -eq 1 ] ;then
    (
	export BUILD=1PB;export EXIT_ON_FAIL=yes
	(
	    # Sources are gotten from the Web by pbaspirecore called par pbsetup.
	    cd kde5/source
	    # Next we create and install the packages.
	    sh kde.SlackBuild plasma-extra:plasma-wayland-protocols
	    sh kde.SlackBuild frameworks
	)
	(
	    cd kde5
	    [ ! -d frameworks ] && mkdir frameworks
	    [ ! -d plasma-extra ] && mkdir plasma-extra
	    # We keep the packages in kde5 so that other computer can be
	    # installed directly.
	    cd frameworks
	    [ -d /tmp/kde_build/frameworks ] && \
		cp /tmp/kde_build/frameworks/*.t?z .
	    cp /tmp/kde_build/*.t?z .
	    chown ${MYUSER}.$MYGROUP *.t?z
	    xpurgesrc 't?z'
	    mv plasma-wayland-protocols-*.t?z ../plasma-extra
	    rm -f ../plasma-extra/plasma-wayland-protocols-1.1.1-*.t?z*
	    rm -rf /tmp/kde_build
	)
	[ $? -ne 0 ] && exit 1
	xhookframew
    )
    [ $? -ne 0 ] && exit 1
fi

if [ $ISPAC4 -eq 1 ] ;then
    xmakealienpac packages4 wxGTK3
    (
	export WXCONF=$XLIBDIR/wx/config/gtk3-unicode-static-3.0
	xmakepac packages4 vbam
    )
    [ $? -ne 0 ] && exit 1
    for i in xrdp xorgxrdp SFML fbida kaffeine eigen3 opencv gradle \
		  signal-desktop vokoscreen audiveris zoom-linux opera vivaldi ;do
	xmakepac packages4 $i
    done
    xhookpac4
fi

if [ $ISCHROMIUM -eq 1 ] ;then 
    (
	# Recompile for libffmpeg.so for Opera.
	export SHARED_FFMPEG=true
	export TMP=$(eval echo ~$MYUSER)/"pbtmp$$"
	echo "=> Compile in the $TMP directory"
	xmakealienpac packages4 chromium
	rm -rf "$TMP"
    )
    [ $? -ne 0 ] && exit 1
fi

if [ $ISAUDACITY -eq 1 ] ;then
    for i in lilv lv2 serd sord sratom suil vamp-plugin-sdk audacity ;do
	xmakealienpac packages4/audacity $i
    done
fi

if [ $ISARDOUR -eq 1 ] ;then    
    for i in liblo liblrdf ardour ;do
	xmakealienpac packages4/ardour $i
    done
fi

if [ $ISLMMS -eq 1 ] ;then    
    for i in stk fltk lmms ;do
	xmakealienpac packages4/lmms $i
    done
fi

mygt "Upgrade packages* done."
