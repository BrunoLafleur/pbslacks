#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

# can be done non root.

XDIR="$(dirname $0)"
. "$XDIR/pbaspireinit"
. "$XDIR/pbinclude"
. "$XDIR/pbaspireinc"
. "$XDIR/pbpathinc"

xhelp () {
    mygt 'Launch this script in a new directory.\nor in a directory which contains slackware64-current.\n\npbslacks should be side by side of this current directory.'|sed 's@\\n@\n@g'
    echo
    echo '> ../pbslacks/pbaspirecore [-core] [-multi] [-framew] [-gparted]'
    echo '>                 [-vnox] [-purge] [-check] [-help|-h]'
}

if [ $# -eq 0 ] ;then
    ISCORE=1
    ISMULTI=1
    ISFRAMEW=1
    ISGPARTED=1
    ISVBOX=1
    ISCHECK=1
    ISPURGE=1
else
    ISCORE=0
    ISMULTI=0
    ISFRAMEW=0
    ISGPARTED=0
    ISVBOX=0
    ISCHECK=0
    ISPURGE=0
fi

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-core" ] ;then
	ISCORE=1
    elif [ "$MYARG" = "-multi" ] ;then
	ISMULTI=1
    elif [ "$MYARG" = "-framew" ] ;then
	ISFRAMEW=1
    elif [ "$MYARG" = "-gparted" ] ;then
	ISGPARTED=1
    elif [ "$MYARG" = "-vbox" ] ;then
	ISVBOX=1
    elif [ "$MYARG" = "-purge" ] ;then
	ISPURGE=1
    elif [ "$MYARG" = "-check" ] ;then
	ISCHECK=1
	XTEMPCHK="$2"
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
	xhelp
	exit 0
    fi
    shift
done

if [ "$0" != "../pbslacks/$MYPROG" -a "$0" != "pbslacks/$MYPROG" ] ;then
    xhelp
    exit 1
fi

MYPWD=$(pwd)
export HOMESLACK="$MYPWD"

# Function for getting packages.
myrget () {
    # TODO : calculate prof with gpath
    prof=$1
    gpath="$2"
    pack="$3"
    accept="$4"
    if [ -n "$accept" ] ;then
	accept="$accept"
    else
	accept="-R *\?C=?;O=?"
    fi
    wget $accept -N -nv -np -nH --cut-dirs=$prof -r "$gpath/"
    [ -d "$pack" ] && find "$pack" -name 'index.html*' -exec rm -f {} \;
}

# Can be the USB stick.
CDIR=$(basename $MYPWD)
ISSTICK=0;[ -d current -a "$CDIR" = slackware64-current ] && ISSTICK=1

# The official current Slackware.
if [ $ISCORE -eq 1 -o $ISPURGE -eq 1 ] ;then
    [ $ISSTICK -eq 1 ] && cd ..
    [ $ISCORE -eq 1 ] && myrget 4 "$SLACKMIR/slackware64-current" \
				slackware64-current

# Nettoyage des doublons
    echo '------------------------------------'
    if [ -d slackware64-current ] ;then
	(
	    cd slackware64-current
	    find . -name '*.t?z'|grep -v '^./source/'|\
		while read i;test "$i" != "" ;do
		    pack=$(echo $i|sed 's@-[0-9\.][^-]*-[^-]*-[^-]*$@@')
		    echo -n .
		    xpurgepac "$pack-[0-9]" txt
		    xpurgepac "$pack-[0-9]" t?z
		    xpurgepac "$pack-[0-9]" asc
		done
	    find source -name '*.tar.?z'|while read i;test "$i" != "" ;do
		pack=$(echo $i|sed 's@-[0-9\.].*$@@')
		echo -n .
		xpurgepac "$pack-[0-9]" tar.?z
		xpurgepac "$pack-[0-9]" tar.*sig*
		xpurgepac "$pack-[0-9]" tar.*asc
	    done
	    echo
	    ln -sf ../current .
	    ln -sf ../perso .
	    ln -sf ../pbslacks .
	    ln -sf ../bumblebee .
	    ln -sf ../divers .
	    ln -sf ../packages* .
	    ln -sf ../kde5 .
	    ln -sf ../gpgkeys .
	)
	mygt "Slackware current copied."
    else
	mygt "Slackware current not copied."
    fi
    [ $ISSTICK -eq 1 ] && cd slackware64-current
    echo '------------------------------------'
fi

# Multilib Alien Bob.
if [ $ISMULTI -eq 1 -o $ISPURGE -eq 1 ] ;then
    [ $ISMULTI -eq 1 ] && myrget 7 "$SLACKMULTI" current

# Nettoyage des doublons
    echo '------------------------------------'
    if [ -d current ] ;then
	(
	    cd current
	    find . -name '*.t?z'|grep -v '^./source/'|\
		while read i;test "$i" != "" ;do
		    pack=$(echo $i|sed 's@-[0-9\.][^-]*-[^-]*-[^-]*$@@')
		    echo -n .
		    xpurgepac "$pack-[0-9]" lst
		    xpurgepac "$pack-[0-9]" meta
		    xpurgepac "$pack-[0-9]" txt
		    xpurgepac "$pack-[0-9]" t?z
		    xpurgepac "$pack-[0-9]" asc
		    xpurgepac "$pack-[0-9]" md5
		done
	)
	mygt "Slackware multilib copied."
    else
	mygt "Slackware multilib not copied."
    fi
    if [ -d slackware64-current ] ;then
	(
	    cd slackware64-current
	    ln -sf ../current .
	)
    fi
    echo '------------------------------------'
fi

# KDE4 + Frameworks KDE5
if [ $ISFRAMEW -eq 1 ] ;then
    (
	cd kde4/source
	echo '------------------------------------'
	tar xvfz ../../pbslacks/builds/sbo/kde4.tar.gz
	mygt "Alien Bob KDE4 scripts copied."
	(
	    cd deps
	    for i in LibRaw exiv2 grantlee libdbusmenu-qt polkit-qt-1 qca sip ;do
		cp ../../../pbslacks/builds/src/${i}-[0-9]* $i
	    done
	    cp ../../../pbslacks/builds/src/phonon-backend-gstreamer-* \
	       phonon-gstreamer
	    cp ../../../pbslacks/builds/src/eigen-* eigen3
	    cp ../../../pbslacks/builds/src/phonon-* phonon4qt4
	)
	(
	    cd other/qt
	    xgeturl "$KDE4OTHER_QT"
	    cd qtwebkit
	    xgeturl "$KDE4OTHER_QTWEBKIT"
	    cd ../../PyQt
	    xgeturl "$KDE4OTHER_PYQT"
	    cd ../scim-tables
	    xgeturl "$KDE4OTHER_SCIMTABLES"
	    cd ../scim-pinyin
	    xgeturl "$KDE4OTHER_SCIMPINYIN"
	    cd ../soprano
	    xgeturl "$KDE4OTHER_SOPRANO"
	    cd ../glade3
	    xgeturl "$KDE4OTHER_GLADE3"
	    cd ..
	    for i in orage raptor2 rasqal redland scim scim-anthy scim-hangul \
			   scim-input-pad scim-m17n strigi akonadi cgmanager \
			   gtk-xfce-engine liblastfm pm-utils qt-gstreamer \
			   qtscriptgenerator ;do
		cp ../../../pbslacks/builds/src/${i}-[0-9]* $i
	    done
	)
	(
	    cd kde;[ ! -d src ] && mkdir src;cd src
	    myrget 3 "$KDE4_SRC" .
	    xgeturl "$KDE4_KACTIVITIES"
	    xgeturl "$KDE4_APPS/kdelibs-4.14.38.tar.xz"
	    xgeturl "$KDE4_WORKSPACE"
	    xpurgesrc 'tar.?z' sig;xpurgesrc 'zip'
	    (
		[ ! -d extragear ] && mkdir extragear;cd extragear
		myrget 2 "$KDE4_CALLIGRA" .
		xgeturl "$KDE4_LIBKSCREEN"
		xgeturl "$KDE4_LIBKTORRENT"
		xgeturl "$KDE4_KTORRENT"
		xgeturl "$KDE4_AMAROK"
		xgeturl "$KDE4_BLUEDEVIL"
		xgeturl "$KDE4_K3B"
		mv k3b-2.0.3a.tar.xz k3b-2.0.3.tar.xz
		xgeturl "$KDE4_KDECONNECT"
		xgeturl "$KDE4_KDEVPYTHON"
		xgeturl "$KDE4_KDEVELOP"
		xgeturl "$KDE4_KDEVELOPPHP"
		xgeturl "$KDE4_KDEVELOPPHPDOCS"
		xgeturl "$KDE4_KDEVPLATFORM"
		xgeturl "$KDE4_KIOMTP"
		xgeturl "$KDE4_KPLAYER"
		xgeturl "$KDE4_KSCREEN"
		xgeturl "$KDE4_KWEBKITPART"
		xgeturl "$KDE4_LIBMMQT"
		mv libmm-qt-1.0.1-1.tar.xz libmm-qt-1.0.1.tar.xz
		xgeturl "$KDE4_OXYGENGTK2"
		xgeturl "$KDE4_PARTITIONMANAGER"
		xgeturl "$KDE4_PLASMANM"
		xgeturl "$KDE4_SKANLITE"
		xgeturl "$KDE4_WICDKDE"
		xgeturl "$KDE4_KDEVELOPPGQT"
		xpurgesrc 'tar.?z' sig
		for i in polkit-kde libnm-qt kaudiocreator ;do
		    cp ../../../../../pbslacks/builds/src/${i}-[0-9]* .
		done
	    )
	)
	echo '------------------------------------'
	(
	    cd kdei/kde-l10n;ln -sf ../../kde/src/kde-l10n/* .
	)
	(
	    cd kdei/calligra-l10n;ln -sf ../../kde/src/extragear/calligra-l10n/* .
	)
	echo '------------------------------------'
    )
    (
	cd kde5
	[ ! -d frameworks ] && mkdir frameworks
	echo '------------------------------------'
	# Get sources
	tar xvfz ../pbslacks/builds/alien/ktown.tar.gz
	mygt "Alien Bob KDE5 scripts copied."
	echo '------------------------------------'
	(
	    cd source;mkdir -p src/frameworks;cd src/frameworks
	    myrget 3 "$KDE5_FW_SRC" .
	    xpurgesrc 'tar.?z' sig;xpurgesrc 'zip'
	)
	echo '------------------------------------'
	(
	    cd source;mkdir -p src/plasma-extra;cd src/plasma-extra
       	    myrget 3 "$KDE5_PLASMAEX_SRC1" .
	    xpurgesrc 'tar.?z' sig
	)
	echo '------------------------------------'
	mygt "KDE5 frameworks sources copied."
	echo '------------------------------------'
	# Get packages deps used by frameworks
	(
	    mkdir -p deps;cd deps
	    xgetpac qrencode "$SLACKALIEN2" 10
	    xgetpac phonon "$SLACKALIEN2" 10
	    xpurgesrc 'tar.?z' asc md5
	    rm -f phonon4qt5-*
	)
	echo '------------------------------------'
    )
    if [ -d slackware64-current ] ;then
	(
	    cd slackware64-current
	    ln -sf ../kde4 .
	    ln -sf ../kde5 .
	)
    fi
fi

if [ $ISCHECK -eq 1 ] ;then
    [ $ISSTICK -eq 1 ] && cd ..
    # Get GPG Keys from the original Slackware web site.
    if [ -d slackware64-current ] ;then
	(
	    cd slackware64-current;rm -f GPG-KEY
	    xgeturl "$SLACKKEYS/slackware64-current/GPG-KEY"
	    ln -sf ../gpgkeys .
	)
    fi
    find slackware64-current -name '*.asc'|while read i;test "$i" != "" ;do
	(
	    echo "$i";rm -f "$i";cd $(dirname "$i")
	    xgeturl "$SLACKKEYS/$i"
	)
    done
    [ $ISSTICK -eq 1 ] && cd slackware64-current

    # Check with GPG signatures
    # From :
    # https://www.linuxquestions.org/questions/slackware-14/how-do-you-gpg-verify-all-of-your-rsync-slackware-directory-464782/#post2339282
    mygt "Check GPG signatures :" >> $XTEMPCHK
    (
	export LANG=C
	find . -type f -name 'GPG-KEY*' -exec gpg --import {} \; >> $XTEMPCHK
	find . -type f -name '*.asc' -exec gpg --verify -q {} \; 2>&1 | \
	    egrep -i 'gpg: assuming signed data in |gpg: bad signature' \
		  >> $XTEMPCHK
    )
fi

# GParted
if [ $ISGPARTED -eq 1 -o $ISPURGE -eq 1 ] ;then
    LGPARTEDISO=$(basename "$GPARTEDISO")
    if [ ! -f "../$LGPARTEDISO" ] ;then
	if [ ! -h Linuxiso ] ; then
	    [ ! -d ../Linuxiso ] && mkdir ../Linuxiso
	    ln -s ../Linuxiso .
	fi
	(
	    cd Linuxiso
	    if [ ! -f "$LGPARTEDISO" ] ;then
		xgeturl "$GPARTEDISO"
		[ $ISGPARTED -eq 1 ] && xpurgepac "gparted-live-[0-9]" iso
		echo '------------------------------------'
		if [ -f "$LGPARTEDISO" ] ;then
		    mygt "GParted copied."
		else
		    mygt "GParted not copied."
		fi
		echo '------------------------------------'
	    fi
	)
    else
	mygt "GParted not copied."
    fi
fi

# VirtualBox
if [ $ISVBOX -eq 1 -o $ISPURGE -eq 1 ] ;then
    LVBOXARCH=$(basename "$VBOXARCH")
    if [ ! -f "../$LVBOXARCH" ] ;then
	if [ ! -h Virtualbox ] ; then
	    [ ! -d ../Virtualbox ] && mkdir ../Virtualbox
	    ln -s ../Virtualbox .
	fi
	(
	    cd Virtualbox
	    if [ ! -f "$LVBOXARCH" ] ;then
		[ $ISVBOX -eq 1 ] && xgeturl "$VBOXARCH"
		xgeturl "$VBOXEXT"
		xgeturl "$VBOXDOC"
		xpurgepac "VirtualBox-[0-9]" exe
		xpurgepac "Oracle_VM_VirtualBox_Extension_Pack-[0-9]" vbox-extpack
		mv $(basename "$VBOXDOC") VirtualBoxUserManual.pdf
		echo '------------------------------------'
		if [ -f "$LVBOXARCH" ] ;then
		    mygt "VirtualBox copied."
		else
		    mygt "VirtualBox not copied."
		fi
		echo '------------------------------------'
	    fi
	)
    else
	mygt "VirtualBox not copied."
    fi
fi
