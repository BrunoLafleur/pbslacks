#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

# Function for purge html index.
xpurgeindex () {
    dir="$1"
    find "$dir" -name 'index.html*' -exec rm -f {} \;
    rm -f "$dir/robots.txt"*
    rm -f "$dir/"*"/robots.txt"*
}

# Function for getting packages.
myrget () {
    # TODO : calculate prof with gpath
    prof=$1
    gpath="$2"
    pack="$3"
    accept="$4"
    if [ -n "$accept" ] ;then
	accept="$accept"
    else
	accept="-R *\?C=?;O=?"
    fi
    wget $accept -N -nv -np -nH --cut-dirs=$prof -r "$gpath/"
    [ -d "$pack" ] && find "$pack" -name 'index.html*' -exec rm -f {} \;
}

# Get new version of a package in a repository.
xgetpac () {
    pac="$1"
    dir="$2"
    prof="$3"
    echo '------------------------------------'
    emygt "Package \$pac :"
    mv ../"$pac-[0-9]"* . 2> /dev/null
    wget -N -A "$pac"'-[0-9]*.t?z*' -r -nv -np -nH --cut-dir=$prof --no-check-certificate "$dir/"
    xpurgepac "$pac-[0-9]" t?z
    xpurgepac "$pac-[0-9]" t?z.asc
    xpurgepac "$pac-[0-9]" t?z.md5
    xpurgepac "$pac-[0-9]" t?z.sha256
    xpurgepac "$pac-[0-9]" lst
    xpurgepac "$pac-[0-9]" meta
    xpurgepac "$pac-[0-9]" txt
}

# Get the original tarball with the slack build scripts.
xgetsrcpac () {
    pac="$1"
    dir="$2"
    prof="$3"
    wget -N -r -nv -np -nH --cut-dir=$prof --no-check-certificate "$dir/"
}

xgetsrcpac0 () {
    pac="$1"
    dir="$2"
    prof="$3"
    mkdir -p "$pac"
    (
	cd "$pac"
	xgetsrcpac "$pac" "$dir" $prof
    )
}

# Get a local copie of the original source tarball with the slack build scripts.
xlocalsrcpac () {
    name="$1"
    path="$2"
    [ ! -d "$name" ] && mkdir "$name"
    cp -au "$PBDIRPROG/builds/sbo/$name/"* "$name"
    rm -f "$name/${name}.tar.gz"
    if [ "$path" != '' ] ;then
      	emygt "Local copy of pbslacks/builds/src/\$path to \$name"
    	cp "$PBDIRPROG/builds/src/$path" "$name"
    fi
}

# Get static url.
xgeturl () {
    path="$1"
    echo '-------------------'
    echo "Getting $path :"
    wget -N -nv --content-disposition --no-check-certificate "$path"
    if [ $? -ne 0 ] ;then
	wget -N -nv --user-agent="" --content-disposition \
	     --no-check-certificate "$path"
    fi
    if [ $? -ne 0 ] ;then
	wget -nv --content-disposition --no-check-certificate "$path"
    fi
}

# Get the original source tarball.
xgetsrc () {
    name="$1"
    path="$2"
    mv ../"$name-[0-9]"* . 2> /dev/null
    mv ../"$name" . 2> /dev/null
    [ ! -d "$name" ] && mkdir "$name"
    cp -au "$PBDIRPROG/builds/sbo/$name/"* "$name"
    rm -f "$name/${name}.tar.gz"
    (
	cd "$name"
	xgeturl "$path"
	# For queries names.
	find . -name '*.t*z\?*'|while read i;test "$i" != "" ;do
	    j="$(echo "$i"|cut -d '?' -f1)"
	    mv "$i" "$j"
	done
    )
}

# Get the original source tarball with path in package.info.
xgetsbosrc () {
    name="$1"
    cib="$2";[ "$cib" != '' ] && cib="_$cib"
    echo '==============================='
    info="$name/${name}.info"
    [ ! -d "$name" ] && mkdir "$name"
    cp -au "$PBDIRPROG/builds/sbo/$info" "$name"
    rm -f "$name/${name}.tar.gz"
    
    # Get all links in DOWNLOAD= and DOWNLOAD_...=
    # Works with multi-lines ending with '\'
    path=$(cat $info| tr '\n' '\f'|sed 's/ \\\f/ /g'|tr '\f' '\n' | \
	       fgrep "DOWNLOAD$cib"|grep -i -v unsupported|\
	       cut -d '=' -f2|cut -d '"' -f2|tr '\n' ' ')
    
    # If there is $REVISION inside path.
    rev=$(cat $info|fgrep REVISION=)
    if [ "$rev" != '' ] ;then
	eval REVISION=$(echo $rev|cut -d= -f2-|sed 's/^"\(.*\)"$/\1/')
	path=$(echo $path|sed "s/\$REVISION/$REVISION/")
	echo $path
    fi
    
    rm -f $info
    for ii in $path ; do
	xgetsrc $name "$ii"
    done
}
