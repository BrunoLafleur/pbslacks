#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

. "$(dirname $0)/pbinclude"

xhelp () {
    mygt 'Launch this script in a directory containing slackware64-current\nor slackware64 or from the current directory for a new clone.'|sed 's@\\n@\n@g'
    echo
    echo "> [../]pbslack/pbsetup [-test] [-h|-help] [-nodial]"
}

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-test" ] ;then
	XTEST=1
    elif [ "$MYARG" = "-nodial" ] ;then
	ISDIAL=0
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
	xhelp
	exit 0
    fi
    shift
done

if [ $XTEST -ne 1 -a "$0" != "../$PBMYPROG" -a "$0" != "$PBMYPROG" ] ;then
    xhelp
    exit 1
fi

PBSLACKSPWD="$(dirname $0)"
SLREPO=$(basename "$MYPWD"|cut -c1-14)
XTEMPOUT=$(mktemp -p /tmp -t pbsetupout.XXXXXX)
XTEMPMES=$(mktemp -p /tmp -t pbsetupmes.XXXXXX)

cleanup () {
    rm -f $XTEMPOUT
    rm -f $XTEMPMES
}

# trap Ctrl-C and kill
trap 'echo "*** Ctrl-C caught -- aborting operations ***"; cleanup; exit 1' 2 14 15

# Can be the USB stick.
CDIR=$(basename $MYPWD)
ISSTICK=0;[ -d current -a "$CDIR" = slackware64-current ] && ISSTICK=1

if [ $XTEST -ne 1 -a $ISSTICK -eq 0 -a "$0" = "$PBMYPROG" \
    -a "$SLREPO" != 'Slackware-x64-' ] ;then

    test_slack () {
	pac="$1"
	last=$(ls -1td "$pac"[0-9]* 2> /dev/null |head -1)
	ls -1td "$pac"[0-9]* 2> /dev/null |head -2|tail -1
    }

    LASTSLACK=$(test_slack Slackware-x64-)
    if [ "$LASTSLACK" != '' ] ;then
	pactit=$(mygt 'Choose working dir')
        YN=;[ $ISDIAL -ne 1 ] && YN=' (y or n)'
	pactext=$(emygt "Local repository \$LASTSLACK found.\nDo you want to work with it\$YN ?")
        if [ $ISDIAL -eq 1 ] ;then
            c=n
	    dialog --colors --backtitle 'pbsetup' --title "$pactit" --defaultno \
		--yesno "$pactext" 10 100
	    [ $? -eq 0 ] && c=y
	else
	    echo '------------------------------------'
	    echo "  $pactit"
	    echo '------------------------------------'
	    echo "$pactext"|sed 's@\\n@\n@g'
	    read c
	fi
	if [ "$c" = 'y' ] ;then
	    cd "$LASTSLACK"
	else
	    LASTSLACK=
	fi
    fi
    if [ "$LASTSLACK" = '' ] ;then
	XDATE=$(date '+%Y%m%d')
	mkdir -p "Slackware-x64-$XDATE"
	cd "Slackware-x64-$XDATE"
    fi
    PBSLACKSPWD='../pbslacks'
fi

MYPWD=$(pwd)
HOMESLACK="$MYPWD"
MYUSER=$(id -u -n)
MYGROUP=$(id -g -n)

XUPASPIRE=on
XUPUPGRADE=off
XUPRECREATE=off
XUPMAKEUSB=off
XUPMAKEISO=off
XUPREFIND=off
XUPSTOPHIB=off
ASPIRE=$(mygt 'Get/Update local repository versus officiel remote Slackware and add-on packages')
UPGRADE=$(mygt 'Sync/Update system to the last fetched current Slackware and add-on packages')
RECREATE=$(mygt 'Compile some add-on packages from sources')
MAKEUSB=$(mygt 'Make a bootable USB stick for Slackware install.')
MAKEISO=$(mygt 'Make a bootable DVD ROM for Slackware install.')
REFIND=$(mygt 'Install the refind boot manager for dual or more boot.')
STOPHIB=$(mygt 'Stop the eventual hibernation of Windows.')

xmaster () {
    defitem=$1;shift
    xsel1=$1;shift;xsel2=$1;shift;xsel3=$1;shift;xsel4=$1;shift;xsel5=$1;shift
    xsel6=$1;shift;xsel7=$1
    pactit=$(mygt 'Main menu');pactit="pbsetup: $pactit"
    pactext=$(mygt 'Choose your actions below')
    if [ $ISDIAL -eq 1 ] ;then
	dialog --colors --backtitle 'pbsetup' --title "$pactit" \
	    --default-item $defitem --defaultno --separate-output --item-help \
	    --help-button --help-status --checklist "$pactext" 0 100 7 \
	    aspire "$ASPIRE" $xsel1 aspire \
	    upgrade "$UPGRADE" $xsel2 upgrade \
	    recreate "$RECREATE" $xsel3 recreate \
	    makeusb "$MAKEUSB" $xsel4 makeusb \
	    makeiso "$MAKEISO" $xsel5 makeiso \
	    refind "$REFIND" $xsel6 refind \
	    stophib "$STOPHIB" $xsel7 stophib
    else
	echo '------------------------------------'
	echo "          $pactit"
	echo '------------------------------------'
	echo "HELP (y or n) :";read c
	if [ "$c" = "y" ] ;then
	    echo "HELP aspire (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP aspire" 1>&2;return;fi
	    echo "HELP upgrade (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP upgrade" 1>&2;return;fi
	    echo "HELP recreate (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP recreate" 1>&2;return;fi
	    echo "HELP makeusb (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP makeusb" 1>&2;return;fi
	    echo "HELP makeiso (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP makeiso" 1>&2;return;fi
	    echo "HELP refind (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP refind" 1>&2;return;fi
	    echo "HELP stophibbernate (y or n) :";read c
	    if [ "$c" = "y" ] ;then echo "HELP stophib" 1>&2;return;fi
	fi
	echo "$ASPIRE (y or n) :";read c
	[ "$c" = "y" ] && echo "aspire" 1>&2
	echo "$UPGRADE (y or n) :";read c
	[ "$c" = "y" ] && echo "upgrade" 1>&2
	echo "$RECREATE (y or n) :";read c
	[ "$c" = "y" ] && echo "recreate" 1>&2
	echo "$MAKEUSB (y or n) :";read c
	[ "$c" = "y" ] && echo "makeusb" 1>&2
	echo "$MAKEISO (y or n) :";read c
	[ "$c" = "y" ] && echo "makeiso" 1>&2
	echo "$REFIND (y or n) :";read c
	[ "$c" = "y" ] && echo "refind" 1>&2
	echo "$STOPHIB (y or n) :";read c
	[ "$c" = "y" ] && echo "stophib" 1>&2
    fi
}

xsel="$XUPASPIRE $XUPUPGRADE $XUPRECREATE $XUPMAKEUSB $XUPMAKEISO $XUPREFIND $XUPSTOPHIB"
ditem=aspire
bclaide=1

while [ $bclaide -eq 1 ] ;do
    xmaster $ditem $xsel 2> $XTEMPOUT
    bclaide=$(cat $XTEMPOUT|grep '^HELP'|wc -l)
    if [ $bclaide -eq 1 ] ;then
	xitem="$(cat $XTEMPOUT|grep '^HELP'|cut -d ' ' -f2)"
	xsel=
	for i in aspire upgrade recreate makeusb makeiso refind stophib ;do
	  if [ $(grep "^$i$" "$XTEMPOUT"|wc -l) -eq 1 ] ;then
	      xsel="$xsel on"
	  else
	      xsel="$xsel off"
	  fi
	done
	ditem=$xitem;bclaide=1;pacaide=
	if [ "$xitem" = aspire ] ;then
	    pacaide=$(mygt 'Do a local clone/update of the officiel Slackware and add-on packages.\nUses pbslacks/pbaspire.')
	elif [ "$xitem" = upgrade ] ;then
	    pacaide=$(mygt 'Upgrade the local system with the local clone.')
	elif [ "$xitem" = recreate ] ;then
	    pacaide=$(mygt 'Compile some source packages after a fresh upgrade or install.')
	elif [ "$xitem" = makeusb ] ;then
	    pacaide=$(mygt 'Make a dual boot install USB stick with Slackware install and GParted Live which can boot on old bios or new UEFI bios computers.')
	elif [ "$xitem" = makeiso ] ;then
	    pacaide=$(mygt 'Make a boot install DVD ROM with Slackware install which can boot on old bios or new UEFI bios computers.')
	elif [ "$xitem" = refind ] ;then
	    pacaide=$(mygt 'Setup the boot manager refind if you have set elilo in the installation of Slackware and you have other systems like MS Windows.')
	elif [ "$xitem" = stophib ] ;then
	    pacaide=$(mygt 'Stop the hibernation of Windows in case it is active after modifying the disks partitions.')
	fi
	if [ $ISDIAL -eq 1 ] ;then
	    dialog --colors --backtitle 'pbsetup' --title "$xitem" \
		--msgbox "$pacaide" 20 80
	else
	    echo '------------------------------------'
	    echo "          $xitem"
	    echo '------------------------------------'
	    echo "$pacaide"|sed 's@\\n@\n@g'
	fi
    fi
done

PBTEST=;[ $XTEST -eq 1 ] && PBTEST='-test'
PBDIAL=;[ $ISDIAL -eq 0 ] && PBDIAL='-nodial'
ISASPIRE=$(cat $XTEMPOUT|grep '^aspire$'|wc -l)
ISUPGRADE=$(cat $XTEMPOUT|grep '^upgrade$'|wc -l)
ISRECREATE=$(cat $XTEMPOUT|grep '^recreate$'|wc -l)
ISUSB=$(cat $XTEMPOUT|grep '^makeusb$'|wc -l)
ISISO=$(cat $XTEMPOUT|grep '^makeiso$'|wc -l)
ISREFIND=$(cat $XTEMPOUT|grep '^refind$'|wc -l)
ISSTOPHIB=$(cat $XTEMPOUT|grep '^stophib$'|wc -l)

# Aspire
if [ $ISASPIRE -eq 1 ] ;then
    "$PBSLACKSPWD/pbaspire" $PBTEST $PBDIAL
    mygt "Clone done (full or partial depending on selected options)." \
	>> $XTEMPMES
fi

# Upgrade
[ $ISRECREATE -eq 1 ] && XXOPT='-post' || XXOPT=
if [ $ISUPGRADE -eq 1 -o $ISRECREATE -eq 1 ] ;then
    MYSCR="screen -A -c $PBSLACKSPWD/screenrc -S pbupgrade"
    if [ $XTEST -eq 1 -o $UID -eq 0 ]; then
        $MYSCR "$PBSLACKSPWD/pbupgrade" -u $MYUSER -g $MYGROUP $PBTEST $XXOPT
    else
	mygt 'Change to root.'
        su - root -c "(cd \"$MYPWD\";$MYSCR \"$PBSLACKSPWD/pbupgrade\" \
		-u $MYUSER -g $MYGROUP $PBTEST $XXOPT)"
    fi
    mygt "Upgrade done for selected set of packages." >> $XTEMPMES
fi

# Makeusb
if [ $ISUSB -eq 1 ] ;then
    if [ $XTEST -eq 1 -o $UID -eq 0 ]; then
        "$PBSLACKSPWD/pbmakeusb" -ask $PBTEST $PBDIAL
    else
	mygt 'Change to root.'
	su - root -c "(cd \"$MYPWD\";\"$PBSLACKSPWD/pbmakeusb\" -ask $PBTEST $PBDIAL)"
    fi
    if [ $? -eq 0 ] ;then
	mygt "USB stick created." >> $XTEMPMES
    else
	mygt "USB stick not created." >> $XTEMPMES
    fi
fi

# Makeiso
if [ $ISISO -eq 1 ] ;then
    XTEMPMES2=$(mktemp -p /tmp -t pbsetupmes2.XXXXXX)
    "$PBSLACKSPWD/pbmakeiso" 2>&1 | tee -a $XTEMPMES2
    if [ $? -eq 0 ] ;then
	mygt "\Z3ISO DVD ROM created.\Zn" > $XTEMPMES
    else
	mygt "\Z3ISO DVD ROM not created.\Zn" > $XTEMPMES
    fi
    cat $XTEMPMES2 >> $XTEMPMES
    rm -f $XTEMPMES2
fi

# Install refind
if [ $ISREFIND -eq 1 ] ;then
    if [ $XTEST -eq 0 -a -d /boot/efi/EFI/Slackware \
		-a ! -d /boot/efi/EFI/refind ] ;then
	xrefind=$(xlast /usr/share/refind-0)/install.sh
	if [ $UID -eq 0 ]; then
	    $xrefind 2>> $XTEMPRES
	else
	    mygt 'Change to root.'
	    su - root -c "(cd \"$MYPWD\";$xrefind 2>> $XTEMPMES)"
	fi
    fi
    if [ $? -eq 0 ] ;then
	if [ ! -d /boot/efi/EFI/Slackware ] ;then
	    mygt "refind not installed because elilo is not." >> $XTEMPMES
	elif [ -d /boot/efi/EFI/refind ] ;then
	    mygt "refind already installed." >> $XTEMPMES
	else
	    mygt "refind installed." >> $XTEMPMES
	fi
    else
	mygt "refind not installed." >> $XTEMPMES
    fi
fi

# Stop MS Windows hibernation
if [ $ISSTOPHIB -eq 1 ] ;then
    if [ $UID -eq 0 ]; then
        "$PBSLACKSPWD/pbstophib" $PBTEST >> $XTEMPMES
    else
	mygt 'Change to root.'
	su - root -c "(cd \"$MYPWD\";\"$PBSLACKSPWD/pbstophib\" $PBTEST >> $XTEMPMES)"
    fi
fi

XEND=0

if [ ! -f "$XTEMPMES" -o ! -s "$XTEMPMES" ] ;then
    mygt "No action was demanded. Exit." > $XTEMPMES
    XEND=1
fi

DACTION=$(mygt 'Actions which were done')

if [ $ISDIAL -eq 1 ] ;then
    dialog --colors --backtitle 'pbsetup' --title "$DACTION" \
	--msgbox "$(cat $XTEMPMES)" 20 90
else
    nodialog "$DACTION" $XTEMPMES
fi

rm -f $XTEMPOUT
rm -f $XTEMPMES
