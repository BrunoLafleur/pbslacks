#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

<<<<<<< HEAD
xhelp () {
    cat <<EOF
Script a lancer dans un repertoire contenant slackware64-current ou slackware64
  ou a partir du repertoire courant pour une nouvelle copie complete.

Launch this script in a directory which contains slackware64-current or
  slackware64 or from the current directory for a new clone.

> [../]pbslack/pbseup [-test] [-h|-help] [-nodial]
EOF
}

XTEST=0
ISDIAL=1

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-test" ] ;then
	XTEST=1
    elif [ "$MYARG" = "-nodial" ] ;then
	ISDIAL=0
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
=======
XTEST=

xhelp () {
    cat <<EOF
Script a lancer dans un repertoire nouvellement cree
  ou existant contenant slackware64-current.

Launch this script in a new directory.
  or in a directory which contains slackware64-current.

pbslacks should be side by side of this current directory.
> ../pbslacks/pbaspire
EOF
}

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-test" ] ;then
	XTEST=yes
    elif [ "$MYARG" = "-help" ] ;then
>>>>>>> 3b31eff1dbd5a37fd0acfdb89ed5fbc194ff00db
	xhelp
	exit 0
    fi
    shift
done

<<<<<<< HEAD
[ $(which dialog 2> /dev/null) = '' ] && ISDIAL=0
MYPROG=$(basename "$0")
PBMYPROG="pbslacks/$MYPROG"

if [ $XTEST -ne 1 -a "$0" != "../$PBMYPROG" -a "$0" != "$PBMYPROG" ] ;then
=======
if [ "$XTEST" != 'yes' -a "$0" != '../pbslacks/pbaspire' -a "$0" != 'pbslacks/pbaspire' ] ;then
>>>>>>> 3b31eff1dbd5a37fd0acfdb89ed5fbc194ff00db
    xhelp
    exit 1
fi

MYPWD=$(pwd)
<<<<<<< HEAD
PBSLACKSPWD="$(dirname $0)"
SLREPO=$(basename "$MYPWD"|cut -c1-14)

if [ $XTEST -ne 1 -a "$0" = "$PBMYPROG" -a "$SLREPO" != 'Slackware-x64-' ] ;then
    test_slack () {
	pac="$1"
	last=$(ls -1td "$pac"[0-9]* 2> /dev/null |head -1)
	ls -1td "$pac"[0-9]* 2> /dev/null |head -2|tail -1
    }

    LASTSLACK=$(test_slack Slackware-x64-)
    if [ "$LASTSLACK" != '' ] ;then
	echo '------------------------------------'
	echo "Local repository $LASTSLACK found."
	echo "Do you wan't to work with it (y or n) ?"
	read c
	if [ "$c" = 'y' ] ;then
	    cd "$LASTSLACK"
	else
	    LASTSLACK=
	fi
    fi
    if [ "$LASTSLACK" = '' ] ;then
	XDATE=`date '+%Y%m%d'`
	mkdir -p "Slackware-x64-$XDATE"
	cd "Slackware-x64-$XDATE"
    fi
    PBSLACKSPWD='../pbslacks'
fi

MYPWD=$(pwd)
HOMESLACK="$MYPWD"

XTEMPOUT=$(mktemp -p /tmp -t pbsetupout.XXXXXX)
XTEMPMES=$(mktemp -p /tmp -t pbsetupmes.XXXXXX)

XUPASPIRE=on
XUPUPGRADE=off
XUPMAKEUSB=off
ASPIRE='Get/Update local repository versus officiel remote Slackware and add-on packages'
UPGRADE='Sync/Update system to the last fetched current Slackware and add-on packages'
MAKEUSB='Make a bootable USB stick for Slackware install.'

xmaster () {
    defitem=$1;shift
    xsel1=$1;shift;xsel2=$1;shift;xsel3=$1
    if [ $ISDIAL -eq 1 ] ;then
	dialog --colors --title 'Main menu' --default-item $defitem --defaultno \
	    --separate-output --item-help --help-button --help-status \
	    --checklist 'Choose your actions below' 0 100 3 \
	    aspire "$ASPIRE" $xsel1 aspire \
	    upgrade "$UPGRADE" $xsel2 upgrade \
	    makeusb "$MAKEUSB" $xsel3 makeusb
    else
	echo '------------------------------------'
	echo "          Main menu"
	echo '------------------------------------'
	echo "HELP aspire (y or n) :";read c
	if [ "$c" = "y" ] ;then echo "HELP aspire" 1>&2;return;fi
	echo "HELP upgrade (y or n) :";read c
	if [ "$c" = "y" ] ;then echo "HELP upgrade" 1>&2;return;fi
	echo "HELP makeusb (y or n) :";read c
	if [ "$c" = "y" ] ;then echo "HELP makeusb" 1>&2;return;fi

	echo "$ASPIRE (y or n) :";read c
	[ "$c" = "y" ] && echo "aspire" 1>&2
	echo "$UPGRADE (y or n) :";read c
	[ "$c" = "y" ] && echo "upgrade" 1>&2
	echo $"$MAKEUSB (y or n) :";read c
	[ "$c" = "y" ] && echo "makeusb" 1>&2
    fi
}

xsel="$XUPASPIRE $XUPUPGRADE $XUPMAKEUSB"
ditem=aspire
=======
XTEMPOUT=$(mktemp -p /tmp -t pbaspireout.XXXXXX)
XTEMPMES=$(mktemp -p /tmp -t pbaspiremes.XXXXXX)

xmaster () {
    defitem=$1;shift
    xsel1=$1;shift;xsel2=$1;shift;xsel3=$1;shift;xsel4=$1;shift;xsel5=$1;shift
    xsel6=$1;shift;xsel7=$1
    dialog --colors --title 'Main menu' --default-item $defitem --defaultno \
	--separate-output --item-help --help-button --help-status --checklist \
	'Choose your actions below' 0 100 7 \
	init 'Init/Verify the repository.' $xsel1 init \
	core 'Get/Update versus officiel Slackware, multilib and frameworks KDE5' $xsel2 core \
	alien 'Get/Update some Alien Bob binary packages' $xsel3 alien \
	ponce 'Get/Update some Ponce binary packages' $xsel4 ponce \
	slonly 'Get/Update some Slackonly binary packages' $xsel5 slonly \
	other 'Get/Update some other source or binary packages' $xsel6 other \
	mozilla 'Get/Update latest Firefox and Thunderbird' $xsel7 mozilla
}

xsel="on on on on on on on on"
ditem=init
>>>>>>> 3b31eff1dbd5a37fd0acfdb89ed5fbc194ff00db
bclaide=1

while [ $bclaide -eq 1 ] ;do
    xmaster $ditem $xsel 2> $XTEMPOUT
    bclaide=$(cat $XTEMPOUT|grep '^HELP'|wc -l)
    if [ $bclaide -eq 1 ] ;then
	xitem="$(cat $XTEMPOUT|grep '^HELP'|cut -d ' ' -f2)"
	xsel=
<<<<<<< HEAD
	for i in aspire upgrade makeusb ;do
=======
	for i in init core alien ponce slonly other mozilla ;do
>>>>>>> 3b31eff1dbd5a37fd0acfdb89ed5fbc194ff00db
	  if [ $(grep "^$i$" "$XTEMPOUT"|wc -l) -eq 1 ] ;then
	      xsel="$xsel on"
	  else
	      xsel="$xsel off"
	  fi
	done
	ditem=$xitem;bclaide=1;pacaide=
<<<<<<< HEAD
	if [ "$xitem" = aspire ] ;then
	    pacaide='Do a local clone of the officiel Slackware and add-on'
	    pacaide="${pacaide} packages.\nUses pbslacks/pbaspire."
	elif [ "$xitem" = upgrade ] ;then
	    pacaide='Update the local system with the local clone.'
	elif [ "$xitem" = makeusb ] ;then
	    pacaide='Make a dual boot install USB stick with Slackware install and GParted Live'
	    pacaide="$pacaide\nwhich can boot on old bios or new UEFI bios computers."
	fi
	if [ $ISDIAL -eq 1 ] ;then
	    dialog --colors --title "$xitem" --msgbox "$pacaide" 20 80
	else
	    echo '------------------------------------'
	    echo "          $xitem"
	    echo '------------------------------------'
	    echo "$pacaide"|sed 's@\\n@\n@'
	    echo "Press a key to continue."
	    read c
	fi
    fi
done

PBTEST=;[ $XTEST -eq 1 ] && PBTEST='-test'
PBDIAL=;[ $ISDIAL -eq 0 ] && PBDIAL='-nodial'
ISUSB=0
ISASPIRE=0
ISUPGRADE=0

while read i;test "$i" != "" ;do
    [ "$(echo $i|cut -c1-4)" = 'HELP' ] && continue
    [ "$i" = aspire ] && ISASPIRE=1
    [ "$i" = upgrade ] && ISUPGRADE=1
    [ "$i" = makeusb ] &&ISUSB=1
done < $XTEMPOUT

if [ $ISASPIRE -eq 1 ] ;then
    "$PBSLACKSPWD/pbaspire" $PBTEST $PBDIAL
    echo "Clone done (full or partial depending on selected options)." \
	>> $XTEMPMES
fi
if [ $ISUPGRADE -eq 1 ] ;then
    "$PBSLACKSPWD/pbupgrade" $PBTEST $PBDIAL
    echo "Upgrade done for selected set of packages." >> $XTEMPMES
fi
if [ $ISUSB -eq 1 ] ;then
    "$PBSLACKSPWD/pbmakeusb" -ask $PBTEST
    echo "USB stick created." >> $XTEMPMES
fi

XEND=0

if [ ! -f "$XTEMPMES" -o $(cat "$XTEMPMES"|wc -c) -eq 0 ] ;then
    echo "No action was demanded. Exit." > $XTEMPMES
    XEND=1
fi

DACTION='Actions which were done'

if [ $ISDIAL -eq 1 ] ;then
    dialog --colors --title "$DACTION" --msgbox "$(cat $XTEMPMES)" 20 80
else
    echo '------------------------------------'
    echo "  $DACTION"
    echo '------------------------------------'
    cat $XTEMPMES
fi

rm -f $XTEMPOUT
=======
	if [ "$xitem" = init ] ;then
	    pacaide='Initialize or verify the current repository.'
	elif [ "$xitem" = core ] ;then
	    pacaide='Get or update the officiel lastest current Slackware.'
	    pacaide="$pacaide\nAnd the multilib of Alien Bob which is a 32 bits compatibility set of packages."
	    pacaide="$pacaide\nAnd the frameworks libraries of Kde5 offered by Alien Bob."
	elif [ "$xitem" = alien ] ;then
	    pacaide='Get or update some Alien Bob binary packages.'
	elif [ "$xitem" = ponce ] ;then
	    pacaide='Get or update some Ponce binary packages.'
	elif [ "$xitem" = slonly ] ;then
	    pacaide='Get or update some Slackonly binary packages.'
	elif [ "$xitem" = other ] ;then
	    pacaide='Get or update some other source or binary packages.'
	elif [ "$xitem" = mozilla ] ;then
	    pacaide='Get or update Firefox and Thunderbird.'
	fi
	dialog --colors --title "$xitem" --msgbox "$pacaide" 20 80
    fi
done

while read i;test "$i" != "" ;do
    if [ "$(echo $i|cut -c1-4)" = 'HELP' ] ;then
	continue
    elif [ "$i" = init ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"init
	fi
	echo "Initialisation done : \Z3"$0"init\Zn." >> $XTEMPMES
    elif [ "$i" = core ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"core
	fi
	echo "Get/Upgrade core system done : \Z3"$0"core\Zn." >> $XTEMPMES
    elif [ "$i" = alien ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"alien
	fi
	echo "Get/Upgrade Alien Bob packages done : \Z3"$0"alien\Zn." >> $XTEMPMES
    elif [ "$i" = ponce ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"ponce
	fi
	echo "Get/Upgrade Ponce packages done : \Z3"$0"ponce\Zn." >> $XTEMPMES
    elif [ "$i" = slonly ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"slonly
	fi
	echo "Get/Upgrade Slackonly packages done : \Z3"$0"slonly\Zn." >> $XTEMPMES
    elif [ "$i" = other ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"other
	fi
	echo "Get/Upgrade other source or binary packages done : \Z3"$0"other\Zn." >> $XTEMPMES
    elif [ "$i" = mozilla ] ;then
	if [ "$XTEST" != 'yes' ] ;then
	    "$0"moz -lang fr
	fi
	echo "Get/Upgrade Firefox and Thunderbird done : \Z3"$0"mozilla\Zn." >> $XTEMPMES
    fi
done < $XTEMPOUT

rm -f $XTEMPOUT

if [ ! -f "$XTEMPMES" -o $(cat "$XTEMPMES"|wc -c) -eq 0 ] ;then
    echo "No action was demanded. Exit." > $XTEMPMES
fi

dialog --colors --title 'Actions which were done' --msgbox "$(cat $XTEMPMES)" 20 80
>>>>>>> 3b31eff1dbd5a37fd0acfdb89ed5fbc194ff00db
rm -f $XTEMPMES
