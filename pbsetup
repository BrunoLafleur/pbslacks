#! /bin/sh

# Auteur : Pierre Brochard (pierre.brochard.1982@m4x.org)
# Date : 2019
# License : See the LICENSE file in this repository.

xhelp () {
    cat <<EOF
Script a lancer dans un repertoire contenant slackware64-current ou slackware64
  ou a partir du repertoire courant pour une nouvelle copie complete.

Launch this script in a directory which contains slackware64-current or
  slackware64 or from the current directory for a new clone.

> [../]pbslack/pbseup [-test] [-h|-help] [-nodial]
EOF
}

XTEST=0
ISDIAL=1
[ x$(which dialog 2> /dev/null) = 'x' ] && ISDIAL=0

nodialog () {
    echo '------------------------------------'
    echo "  $1"
    echo '------------------------------------'
    cat "$2"
}

while [ $# -ge 1 ] ;do
    MYARG="$1"
    if [ "$MYARG" = "-test" ] ;then
	XTEST=1
    elif [ "$MYARG" = "-nodial" ] ;then
	ISDIAL=0
    elif [ "$MYARG" = "-help" -o "$MYARG" = "-h" ] ;then
	xhelp
	exit 0
    fi
    shift
done

MYPROG=$(basename "$0")
PBMYPROG="pbslacks/$MYPROG"

if [ $XTEST -ne 1 -a "$0" != "../$PBMYPROG" -a "$0" != "$PBMYPROG" ] ;then
    xhelp
    exit 1
fi

MYPWD=$(pwd)
PBSLACKSPWD="$(dirname $0)"
SLREPO=$(basename "$MYPWD"|cut -c1-14)

XTEMPOUT=$(mktemp -p /tmp -t pbsetupout.XXXXXX)
XTEMPMES=$(mktemp -p /tmp -t pbsetupmes.XXXXXX)

if [ $XTEST -ne 1 -a "$0" = "$PBMYPROG" -a "$SLREPO" != 'Slackware-x64-' ] ;then
    test_slack () {
	pac="$1"
	last=$(ls -1td "$pac"[0-9]* 2> /dev/null |head -1)
	ls -1td "$pac"[0-9]* 2> /dev/null |head -2|tail -1
    }

    LASTSLACK=$(test_slack Slackware-x64-)
    if [ "$LASTSLACK" != '' ] ;then
        if [ $ISDIAL -eq 1 ] ;then
            c=n
	    pactext='Local repository $LASTSLACK found.\n'
	    pactext="${pactext}Do you want to work with it ?"
	    dialog --colors --title 'Choose working dir' --defaultno \
	        --yesno "$pactext" 10 100
	    [ $? -eq 0 ] && c=y
	else
	    echo '------------------------------------'
	    echo "Local repository $LASTSLACK found."
	    echo 'Do you want to work with it (y or n) ?'
	    read c
	fi
	if [ "$c" = 'y' ] ;then
	    cd "$LASTSLACK"
	else
	    LASTSLACK=
	fi
    fi
    if [ "$LASTSLACK" = '' ] ;then
	XDATE=`date '+%Y%m%d'`
	mkdir -p "Slackware-x64-$XDATE"
	cd "Slackware-x64-$XDATE"
    fi
    PBSLACKSPWD='../pbslacks'
fi

MYPWD=$(pwd)
HOMESLACK="$MYPWD"

XUPASPIRE=on
XUPUPGRADE=off
XUPMAKEUSB=off
ASPIRE='Get/Update local repository versus officiel remote Slackware and add-on packages'
UPGRADE='Sync/Update system to the last fetched current Slackware and add-on packages'
MAKEUSB='Make a bootable USB stick for Slackware install.'

xmaster () {
    defitem=$1;shift
    xsel1=$1;shift;xsel2=$1;shift;xsel3=$1
    if [ $ISDIAL -eq 1 ] ;then
	dialog --colors --title 'Main menu' --default-item $defitem --defaultno \
	    --separate-output --item-help --help-button --help-status \
	    --checklist 'Choose your actions below' 0 100 3 \
	    aspire "$ASPIRE" $xsel1 aspire \
	    upgrade "$UPGRADE" $xsel2 upgrade \
	    makeusb "$MAKEUSB" $xsel3 makeusb
    else
	echo '------------------------------------'
	echo "          Main menu"
	echo '------------------------------------'
	echo "HELP aspire (y or n) :";read c
	if [ "$c" = "y" ] ;then echo "HELP aspire" 1>&2;return;fi
	echo "HELP upgrade (y or n) :";read c
	if [ "$c" = "y" ] ;then echo "HELP upgrade" 1>&2;return;fi
	echo "HELP makeusb (y or n) :";read c
	if [ "$c" = "y" ] ;then echo "HELP makeusb" 1>&2;return;fi

	echo "$ASPIRE (y or n) :";read c
	[ "$c" = "y" ] && echo "aspire" 1>&2
	echo "$UPGRADE (y or n) :";read c
	[ "$c" = "y" ] && echo "upgrade" 1>&2
	echo $"$MAKEUSB (y or n) :";read c
	[ "$c" = "y" ] && echo "makeusb" 1>&2
    fi
}

xsel="$XUPASPIRE $XUPUPGRADE $XUPMAKEUSB"
ditem=aspire
bclaide=1

while [ $bclaide -eq 1 ] ;do
    xmaster $ditem $xsel 2> $XTEMPOUT
    bclaide=$(cat $XTEMPOUT|grep '^HELP'|wc -l)
    if [ $bclaide -eq 1 ] ;then
	xitem="$(cat $XTEMPOUT|grep '^HELP'|cut -d ' ' -f2)"
	xsel=
	for i in aspire upgrade makeusb ;do
	  if [ $(grep "^$i$" "$XTEMPOUT"|wc -l) -eq 1 ] ;then
	      xsel="$xsel on"
	  else
	      xsel="$xsel off"
	  fi
	done
	ditem=$xitem;bclaide=1;pacaide=
	if [ "$xitem" = aspire ] ;then
	    pacaide='Do a local clone/update of the officiel Slackware and'
	    pacaide="${pacaide} add-on packages.\nUses pbslacks/pbaspire."
	elif [ "$xitem" = upgrade ] ;then
	    pacaide='Upgrade the local system with the local clone.'
	elif [ "$xitem" = makeusb ] ;then
	    pacaide='Make a dual boot install USB stick with Slackware install'
	    pacaide="${pacaide} and GParted Live which can boot on old bios or"
	    pacaise="${pacaide} new UEFI bios computers."
	fi
	if [ $ISDIAL -eq 1 ] ;then
	    dialog --colors --title "$xitem" --msgbox "$pacaide" 20 80
	else
	    echo '------------------------------------'
	    echo "          $xitem"
	    echo '------------------------------------'
	    echo "$pacaide"|sed 's@\\n@\n@'
	    echo "Press a key to continue."
	    read c
	fi
    fi
done

PBTEST=;[ $XTEST -eq 1 ] && PBTEST='-test'
PBDIAL=;[ $ISDIAL -eq 0 ] && PBDIAL='-nodial'
ISUSB=0
ISASPIRE=0
ISUPGRADE=0

while read i;test "$i" != "" ;do
    [ "$(echo $i|cut -c1-4)" = 'HELP' ] && continue
    [ "$i" = aspire ] && ISASPIRE=1
    [ "$i" = upgrade ] && ISUPGRADE=1
    [ "$i" = makeusb ] && ISUSB=1
done < $XTEMPOUT

if [ $ISASPIRE -eq 1 ] ;then
    "$PBSLACKSPWD/pbaspire" $PBTEST $PBDIAL
    echo "Clone done (full or partial depending on selected options)." \
	>> $XTEMPMES
fi
if [ $ISUPGRADE -eq 1 ] ;then
    MYSCR='screen -S pbupgrade'
    if [ $XTEST -eq 1 -o $UID -eq 0 ]; then
        $MYSCR "$PBSLACKSPWD/pbupgrade" $PBTEST $PBDIAL
    else
	echo 'Change to root.'
        su - root -c "(cd \"$MYPWD\";$MYSCR \"$PBSLACKSPWD/pbupgrade\" $PBTEST $PBDIAL)"
    fi
    echo "Upgrade done for selected set of packages." >> $XTEMPMES
fi
if [ $ISUSB -eq 1 ] ;then
    if [ $XTEST -eq 1 -o $UID -eq 0 ]; then
        "$PBSLACKSPWD/pbmakeusb" -ask $PBTEST
    else
	echo 'Change to root.'
	su - root -c "(cd \"$MYPWD\";\"$PBSLACKSPWD/pbmakeusb\" -ask $PBTEST)"
    fi
    echo "USB stick created." >> $XTEMPMES
fi

XEND=0

if [ ! -f "$XTEMPMES" -o $(cat "$XTEMPMES"|wc -c) -eq 0 ] ;then
    echo "No action was demanded. Exit." > $XTEMPMES
    XEND=1
fi

DACTION='Actions which were done'

if [ $ISDIAL -eq 1 ] ;then
    dialog --colors --title "$DACTION" --msgbox "$(cat $XTEMPMES)" 20 80
else
    nodialog "$DACTION" $XTEMPMES
fi

rm -f $XTEMPOUT
rm -f $XTEMPMES
